
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000433c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080044d0  080044d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d0  080044d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000074  0800454c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800454c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc5b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002293  00000000  00000000  0002ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ba6  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6c7  00000000  00000000  00049596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dca0  00000000  00000000  00058c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e68fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  000e6950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004430 	.word	0x08004430

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004430 	.word	0x08004430

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <command_parser_fsm>:

uint32_t ADC_value;
uint32_t invalid_char;


void command_parser_fsm(ADC_HandleTypeDef hadc1) {
 8000504:	b084      	sub	sp, #16
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
 800050a:	f107 0c08 	add.w	ip, r7, #8
 800050e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (state_parser) {
 8000512:	4ba1      	ldr	r3, [pc, #644]	; (8000798 <command_parser_fsm+0x294>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b0d      	cmp	r3, #13
 8000518:	f200 81c4 	bhi.w	80008a4 <command_parser_fsm+0x3a0>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <command_parser_fsm+0x20>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	0800055d 	.word	0x0800055d
 8000528:	080005b3 	.word	0x080005b3
 800052c:	08000623 	.word	0x08000623
 8000530:	08000667 	.word	0x08000667
 8000534:	080006ab 	.word	0x080006ab
 8000538:	080006ef 	.word	0x080006ef
 800053c:	08000781 	.word	0x08000781
 8000540:	0800080d 	.word	0x0800080d
 8000544:	08000851 	.word	0x08000851
 8000548:	080008a5 	.word	0x080008a5
 800054c:	080008a5 	.word	0x080008a5
 8000550:	080008a5 	.word	0x080008a5
 8000554:	080008a5 	.word	0x080008a5
 8000558:	0800057b 	.word	0x0800057b
		case INIT:
			if (buffer[index_buffer-1] == '!') {
 800055c:	4b8f      	ldr	r3, [pc, #572]	; (800079c <command_parser_fsm+0x298>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	4a8f      	ldr	r2, [pc, #572]	; (80007a0 <command_parser_fsm+0x29c>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	2b21      	cmp	r3, #33	; 0x21
 8000568:	f040 819e 	bne.w	80008a8 <command_parser_fsm+0x3a4>
				invalid_char = 0;
 800056c:	4b8d      	ldr	r3, [pc, #564]	; (80007a4 <command_parser_fsm+0x2a0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				state_parser = S1;
 8000572:	4b89      	ldr	r3, [pc, #548]	; (8000798 <command_parser_fsm+0x294>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000578:	e196      	b.n	80008a8 <command_parser_fsm+0x3a4>
		case STUFF:
			if (buffer[index_buffer-1] == '\b') {
 800057a:	4b88      	ldr	r3, [pc, #544]	; (800079c <command_parser_fsm+0x298>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a87      	ldr	r2, [pc, #540]	; (80007a0 <command_parser_fsm+0x29c>)
 8000582:	5cd3      	ldrb	r3, [r2, r3]
 8000584:	2b08      	cmp	r3, #8
 8000586:	d10e      	bne.n	80005a6 <command_parser_fsm+0xa2>
				invalid_char--;
 8000588:	4b86      	ldr	r3, [pc, #536]	; (80007a4 <command_parser_fsm+0x2a0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a85      	ldr	r2, [pc, #532]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000590:	6013      	str	r3, [r2, #0]
				if (invalid_char == 0) {
 8000592:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	f040 8188 	bne.w	80008ac <command_parser_fsm+0x3a8>
					state_parser = last_state;
 800059c:	4b82      	ldr	r3, [pc, #520]	; (80007a8 <command_parser_fsm+0x2a4>)
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <command_parser_fsm+0x294>)
 80005a2:	701a      	strb	r2, [r3, #0]
				}
			} else {
				invalid_char++;
			}
			break;
 80005a4:	e182      	b.n	80008ac <command_parser_fsm+0x3a8>
				invalid_char++;
 80005a6:	4b7f      	ldr	r3, [pc, #508]	; (80007a4 <command_parser_fsm+0x2a0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	4a7d      	ldr	r2, [pc, #500]	; (80007a4 <command_parser_fsm+0x2a0>)
 80005ae:	6013      	str	r3, [r2, #0]
			break;
 80005b0:	e17c      	b.n	80008ac <command_parser_fsm+0x3a8>
		case S1:
			if (buffer[index_buffer-1] == 'R') {
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <command_parser_fsm+0x298>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	4a79      	ldr	r2, [pc, #484]	; (80007a0 <command_parser_fsm+0x29c>)
 80005ba:	5cd3      	ldrb	r3, [r2, r3]
 80005bc:	2b52      	cmp	r3, #82	; 0x52
 80005be:	d103      	bne.n	80005c8 <command_parser_fsm+0xc4>
				state_parser = S2;
 80005c0:	4b75      	ldr	r3, [pc, #468]	; (8000798 <command_parser_fsm+0x294>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S1;
				state_parser = STUFF;
			}
			break;
 80005c6:	e172      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == 'O') {
 80005c8:	4b74      	ldr	r3, [pc, #464]	; (800079c <command_parser_fsm+0x298>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	4a74      	ldr	r2, [pc, #464]	; (80007a0 <command_parser_fsm+0x29c>)
 80005d0:	5cd3      	ldrb	r3, [r2, r3]
 80005d2:	2b4f      	cmp	r3, #79	; 0x4f
 80005d4:	d103      	bne.n	80005de <command_parser_fsm+0xda>
				state_parser = S6;
 80005d6:	4b70      	ldr	r3, [pc, #448]	; (8000798 <command_parser_fsm+0x294>)
 80005d8:	2206      	movs	r2, #6
 80005da:	701a      	strb	r2, [r3, #0]
			break;
 80005dc:	e167      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '!') {
 80005de:	4b6f      	ldr	r3, [pc, #444]	; (800079c <command_parser_fsm+0x298>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a6e      	ldr	r2, [pc, #440]	; (80007a0 <command_parser_fsm+0x29c>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	2b21      	cmp	r3, #33	; 0x21
 80005ea:	d103      	bne.n	80005f4 <command_parser_fsm+0xf0>
				state_parser = S1;
 80005ec:	4b6a      	ldr	r3, [pc, #424]	; (8000798 <command_parser_fsm+0x294>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
			break;
 80005f2:	e15c      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 80005f4:	4b69      	ldr	r3, [pc, #420]	; (800079c <command_parser_fsm+0x298>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a69      	ldr	r2, [pc, #420]	; (80007a0 <command_parser_fsm+0x29c>)
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d103      	bne.n	800060a <command_parser_fsm+0x106>
				state_parser = INIT;
 8000602:	4b65      	ldr	r3, [pc, #404]	; (8000798 <command_parser_fsm+0x294>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
			break;
 8000608:	e151      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 800060a:	4b66      	ldr	r3, [pc, #408]	; (80007a4 <command_parser_fsm+0x2a0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	4a64      	ldr	r2, [pc, #400]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000612:	6013      	str	r3, [r2, #0]
				last_state = S1;
 8000614:	4b64      	ldr	r3, [pc, #400]	; (80007a8 <command_parser_fsm+0x2a4>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 800061a:	4b5f      	ldr	r3, [pc, #380]	; (8000798 <command_parser_fsm+0x294>)
 800061c:	220d      	movs	r2, #13
 800061e:	701a      	strb	r2, [r3, #0]
			break;
 8000620:	e145      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S2:
			if (buffer[index_buffer-1] == 'S') {
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <command_parser_fsm+0x298>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a5d      	ldr	r2, [pc, #372]	; (80007a0 <command_parser_fsm+0x29c>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	2b53      	cmp	r3, #83	; 0x53
 800062e:	d103      	bne.n	8000638 <command_parser_fsm+0x134>
				state_parser = S3;
 8000630:	4b59      	ldr	r3, [pc, #356]	; (8000798 <command_parser_fsm+0x294>)
 8000632:	2203      	movs	r2, #3
 8000634:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S2;
				state_parser = STUFF;
			}
			break;
 8000636:	e13a      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 8000638:	4b58      	ldr	r3, [pc, #352]	; (800079c <command_parser_fsm+0x298>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a58      	ldr	r2, [pc, #352]	; (80007a0 <command_parser_fsm+0x29c>)
 8000640:	5cd3      	ldrb	r3, [r2, r3]
 8000642:	2b08      	cmp	r3, #8
 8000644:	d103      	bne.n	800064e <command_parser_fsm+0x14a>
				state_parser = S1;
 8000646:	4b54      	ldr	r3, [pc, #336]	; (8000798 <command_parser_fsm+0x294>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
			break;
 800064c:	e12f      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 800064e:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a53      	ldr	r2, [pc, #332]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000656:	6013      	str	r3, [r2, #0]
				last_state = S2;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <command_parser_fsm+0x2a4>)
 800065a:	2202      	movs	r2, #2
 800065c:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 800065e:	4b4e      	ldr	r3, [pc, #312]	; (8000798 <command_parser_fsm+0x294>)
 8000660:	220d      	movs	r2, #13
 8000662:	701a      	strb	r2, [r3, #0]
			break;
 8000664:	e123      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S3:
			if (buffer[index_buffer-1] == 'T') {
 8000666:	4b4d      	ldr	r3, [pc, #308]	; (800079c <command_parser_fsm+0x298>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3b01      	subs	r3, #1
 800066c:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <command_parser_fsm+0x29c>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	2b54      	cmp	r3, #84	; 0x54
 8000672:	d103      	bne.n	800067c <command_parser_fsm+0x178>
				state_parser = S4;
 8000674:	4b48      	ldr	r3, [pc, #288]	; (8000798 <command_parser_fsm+0x294>)
 8000676:	2204      	movs	r2, #4
 8000678:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S3;
				state_parser = STUFF;
			}
			break;
 800067a:	e118      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 800067c:	4b47      	ldr	r3, [pc, #284]	; (800079c <command_parser_fsm+0x298>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	4a47      	ldr	r2, [pc, #284]	; (80007a0 <command_parser_fsm+0x29c>)
 8000684:	5cd3      	ldrb	r3, [r2, r3]
 8000686:	2b08      	cmp	r3, #8
 8000688:	d103      	bne.n	8000692 <command_parser_fsm+0x18e>
				state_parser = S2;
 800068a:	4b43      	ldr	r3, [pc, #268]	; (8000798 <command_parser_fsm+0x294>)
 800068c:	2202      	movs	r2, #2
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e10d      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <command_parser_fsm+0x2a0>)
 800069a:	6013      	str	r3, [r2, #0]
				last_state = S3;
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <command_parser_fsm+0x2a4>)
 800069e:	2203      	movs	r2, #3
 80006a0:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <command_parser_fsm+0x294>)
 80006a4:	220d      	movs	r2, #13
 80006a6:	701a      	strb	r2, [r3, #0]
			break;
 80006a8:	e101      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S4:
			if (buffer[index_buffer-1] == '#') {
 80006aa:	4b3c      	ldr	r3, [pc, #240]	; (800079c <command_parser_fsm+0x298>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <command_parser_fsm+0x29c>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	2b23      	cmp	r3, #35	; 0x23
 80006b6:	d103      	bne.n	80006c0 <command_parser_fsm+0x1bc>
				state_parser = S5;
 80006b8:	4b37      	ldr	r3, [pc, #220]	; (8000798 <command_parser_fsm+0x294>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S4;
				state_parser = STUFF;
			}
			break;
 80006be:	e0f6      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if(buffer[index_buffer-1] == '\b') {
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <command_parser_fsm+0x298>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <command_parser_fsm+0x29c>)
 80006c8:	5cd3      	ldrb	r3, [r2, r3]
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	d103      	bne.n	80006d6 <command_parser_fsm+0x1d2>
				state_parser = S3;
 80006ce:	4b32      	ldr	r3, [pc, #200]	; (8000798 <command_parser_fsm+0x294>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
			break;
 80006d4:	e0eb      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <command_parser_fsm+0x2a0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <command_parser_fsm+0x2a0>)
 80006de:	6013      	str	r3, [r2, #0]
				last_state = S4;
 80006e0:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <command_parser_fsm+0x2a4>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <command_parser_fsm+0x294>)
 80006e8:	220d      	movs	r2, #13
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e0df      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S5:
			if (buffer[index_buffer-1] == '\r') {
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <command_parser_fsm+0x298>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <command_parser_fsm+0x29c>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	2b0d      	cmp	r3, #13
 80006fa:	d12a      	bne.n	8000752 <command_parser_fsm+0x24e>
				HAL_ADC_Start(&hadc1);
 80006fc:	f107 0008 	add.w	r0, r7, #8
 8000700:	f000 fe44 	bl	800138c <HAL_ADC_Start>
				ADC_value = ceil(HAL_ADC_GetValue(&hadc1));
 8000704:	f107 0008 	add.w	r0, r7, #8
 8000708:	f000 feee 	bl	80014e8 <HAL_ADC_GetValue>
 800070c:	4603      	mov	r3, r0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe5e 	bl	80003d0 <__aeabi_ui2d>
 8000714:	4602      	mov	r2, r0
 8000716:	460b      	mov	r3, r1
 8000718:	4610      	mov	r0, r2
 800071a:	4619      	mov	r1, r3
 800071c:	f7ff fed2 	bl	80004c4 <__aeabi_d2uiz>
 8000720:	4603      	mov	r3, r0
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <command_parser_fsm+0x2a8>)
 8000724:	6013      	str	r3, [r2, #0]
				sprintf(data, "!ADC=%d#\r\n", ADC_value);
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <command_parser_fsm+0x2a8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	4920      	ldr	r1, [pc, #128]	; (80007b0 <command_parser_fsm+0x2ac>)
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <command_parser_fsm+0x2b0>)
 8000730:	f003 fa04 	bl	8003b3c <siprintf>
				command_flag = 1;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <command_parser_fsm+0x2b4>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
				sprintf(command_data, "%s", "!RST#");
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <command_parser_fsm+0x2b8>)
 800073c:	4920      	ldr	r1, [pc, #128]	; (80007c0 <command_parser_fsm+0x2bc>)
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <command_parser_fsm+0x2c0>)
 8000740:	f003 f9fc 	bl	8003b3c <siprintf>
				invalid_char = 0;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
				state_parser = INIT;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <command_parser_fsm+0x294>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S5;
				state_parser = STUFF;
			}
			break;
 8000750:	e0ad      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <command_parser_fsm+0x298>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <command_parser_fsm+0x29c>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d103      	bne.n	8000768 <command_parser_fsm+0x264>
				state_parser = S4;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <command_parser_fsm+0x294>)
 8000762:	2204      	movs	r2, #4
 8000764:	701a      	strb	r2, [r3, #0]
			break;
 8000766:	e0a2      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <command_parser_fsm+0x2a0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <command_parser_fsm+0x2a0>)
 8000770:	6013      	str	r3, [r2, #0]
				last_state = S5;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <command_parser_fsm+0x2a4>)
 8000774:	2205      	movs	r2, #5
 8000776:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <command_parser_fsm+0x294>)
 800077a:	220d      	movs	r2, #13
 800077c:	701a      	strb	r2, [r3, #0]
			break;
 800077e:	e096      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S6:
			if (buffer[index_buffer-1] == 'K') {
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <command_parser_fsm+0x298>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <command_parser_fsm+0x29c>)
 8000788:	5cd3      	ldrb	r3, [r2, r3]
 800078a:	2b4b      	cmp	r3, #75	; 0x4b
 800078c:	d11c      	bne.n	80007c8 <command_parser_fsm+0x2c4>
				state_parser = S7;
 800078e:	4b02      	ldr	r3, [pc, #8]	; (8000798 <command_parser_fsm+0x294>)
 8000790:	2207      	movs	r2, #7
 8000792:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S6;
				state_parser = STUFF;
			}
			break;
 8000794:	e08b      	b.n	80008ae <command_parser_fsm+0x3aa>
 8000796:	bf00      	nop
 8000798:	200000b6 	.word	0x200000b6
 800079c:	200000b9 	.word	0x200000b9
 80007a0:	20000098 	.word	0x20000098
 80007a4:	20000094 	.word	0x20000094
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	20000090 	.word	0x20000090
 80007b0:	08004448 	.word	0x08004448
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	200000bb 	.word	0x200000bb
 80007bc:	08004454 	.word	0x08004454
 80007c0:	0800445c 	.word	0x0800445c
 80007c4:	200000bc 	.word	0x200000bc
			} else if (buffer[index_buffer-1] == '\b') {
 80007c8:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <command_parser_fsm+0x3b8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <command_parser_fsm+0x3bc>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d103      	bne.n	80007de <command_parser_fsm+0x2da>
				state_parser = S1;
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <command_parser_fsm+0x3c0>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
			break;
 80007dc:	e067      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <command_parser_fsm+0x3b8>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <command_parser_fsm+0x3bc>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d103      	bne.n	80007f4 <command_parser_fsm+0x2f0>
				state_parser = INIT;
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <command_parser_fsm+0x3c0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
			break;
 80007f2:	e05c      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <command_parser_fsm+0x3c4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <command_parser_fsm+0x3c4>)
 80007fc:	6013      	str	r3, [r2, #0]
				last_state = S6;
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <command_parser_fsm+0x3c8>)
 8000800:	2206      	movs	r2, #6
 8000802:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <command_parser_fsm+0x3c0>)
 8000806:	220d      	movs	r2, #13
 8000808:	701a      	strb	r2, [r3, #0]
			break;
 800080a:	e050      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S7:
			if (buffer[index_buffer-1] == '#') {
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <command_parser_fsm+0x3b8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3b01      	subs	r3, #1
 8000812:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <command_parser_fsm+0x3bc>)
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	2b23      	cmp	r3, #35	; 0x23
 8000818:	d103      	bne.n	8000822 <command_parser_fsm+0x31e>
				state_parser = S8;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <command_parser_fsm+0x3c0>)
 800081c:	2208      	movs	r2, #8
 800081e:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S7;
				state_parser = STUFF;
			}
			break;
 8000820:	e045      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <command_parser_fsm+0x3b8>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <command_parser_fsm+0x3bc>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	2b08      	cmp	r3, #8
 800082e:	d103      	bne.n	8000838 <command_parser_fsm+0x334>
				state_parser = S6;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <command_parser_fsm+0x3c0>)
 8000832:	2206      	movs	r2, #6
 8000834:	701a      	strb	r2, [r3, #0]
			break;
 8000836:	e03a      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <command_parser_fsm+0x3c4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <command_parser_fsm+0x3c4>)
 8000840:	6013      	str	r3, [r2, #0]
				last_state = S7;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <command_parser_fsm+0x3c8>)
 8000844:	2207      	movs	r2, #7
 8000846:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <command_parser_fsm+0x3c0>)
 800084a:	220d      	movs	r2, #13
 800084c:	701a      	strb	r2, [r3, #0]
			break;
 800084e:	e02e      	b.n	80008ae <command_parser_fsm+0x3aa>
		case S8:
			if (buffer[index_buffer-1] == '\r') {
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <command_parser_fsm+0x3b8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <command_parser_fsm+0x3bc>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	2b0d      	cmp	r3, #13
 800085c:	d10b      	bne.n	8000876 <command_parser_fsm+0x372>
				command_flag = 0;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <command_parser_fsm+0x3cc>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
				sprintf(command_data, "%s", "!OK#");
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <command_parser_fsm+0x3d0>)
 8000866:	491c      	ldr	r1, [pc, #112]	; (80008d8 <command_parser_fsm+0x3d4>)
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <command_parser_fsm+0x3d8>)
 800086a:	f003 f967 	bl	8003b3c <siprintf>
				state_parser = INIT;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <command_parser_fsm+0x3c0>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
			} else {
				invalid_char++;
				last_state = S8;
				state_parser = STUFF;
			}
			break;
 8000874:	e01b      	b.n	80008ae <command_parser_fsm+0x3aa>
			} else if (buffer[index_buffer-1] == '\b') {
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <command_parser_fsm+0x3b8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <command_parser_fsm+0x3bc>)
 800087e:	5cd3      	ldrb	r3, [r2, r3]
 8000880:	2b08      	cmp	r3, #8
 8000882:	d103      	bne.n	800088c <command_parser_fsm+0x388>
				state_parser = S7;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <command_parser_fsm+0x3c0>)
 8000886:	2207      	movs	r2, #7
 8000888:	701a      	strb	r2, [r3, #0]
			break;
 800088a:	e010      	b.n	80008ae <command_parser_fsm+0x3aa>
				invalid_char++;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <command_parser_fsm+0x3c4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <command_parser_fsm+0x3c4>)
 8000894:	6013      	str	r3, [r2, #0]
				last_state = S8;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <command_parser_fsm+0x3c8>)
 8000898:	2208      	movs	r2, #8
 800089a:	701a      	strb	r2, [r3, #0]
				state_parser = STUFF;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <command_parser_fsm+0x3c0>)
 800089e:	220d      	movs	r2, #13
 80008a0:	701a      	strb	r2, [r3, #0]
			break;
 80008a2:	e004      	b.n	80008ae <command_parser_fsm+0x3aa>
		default:
			break;
 80008a4:	bf00      	nop
 80008a6:	e002      	b.n	80008ae <command_parser_fsm+0x3aa>
			break;
 80008a8:	bf00      	nop
 80008aa:	e000      	b.n	80008ae <command_parser_fsm+0x3aa>
			break;
 80008ac:	bf00      	nop
	}
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008b6:	b004      	add	sp, #16
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200000b9 	.word	0x200000b9
 80008c0:	20000098 	.word	0x20000098
 80008c4:	200000b6 	.word	0x200000b6
 80008c8:	20000094 	.word	0x20000094
 80008cc:	200000d0 	.word	0x200000d0
 80008d0:	200000bb 	.word	0x200000bb
 80008d4:	08004460 	.word	0x08004460
 80008d8:	0800445c 	.word	0x0800445c
 80008dc:	200000bc 	.word	0x200000bc

080008e0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t c[2];
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2 ){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_UART_RxCpltCallback+0x54>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d11b      	bne.n	800092a <HAL_UART_RxCpltCallback+0x4a>
//		HAL_UART_Transmit(&huart2 , &temp , 1, 50);
		buffer[index_buffer] = temp;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_UART_RxCpltCallback+0x58>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_UART_RxCpltCallback+0x5c>)
 80008fa:	7819      	ldrb	r1, [r3, #0]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_UART_RxCpltCallback+0x60>)
 80008fe:	5499      	strb	r1, [r3, r2]
		index_buffer += 1;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_UART_RxCpltCallback+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_UART_RxCpltCallback+0x58>)
 800090a:	701a      	strb	r2, [r3, #0]
		if (index_buffer == 30) index_buffer = 0;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_UART_RxCpltCallback+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b1e      	cmp	r3, #30
 8000912:	d102      	bne.n	800091a <HAL_UART_RxCpltCallback+0x3a>
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_UART_RxCpltCallback+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_UART_RxCpltCallback+0x64>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT	(&huart2 , &temp , 1);
 8000920:	2201      	movs	r2, #1
 8000922:	4906      	ldr	r1, [pc, #24]	; (800093c <HAL_UART_RxCpltCallback+0x5c>)
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <HAL_UART_RxCpltCallback+0x68>)
 8000926:	f002 fc7e 	bl	8003226 <HAL_UART_Receive_IT>
	}
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40004400 	.word	0x40004400
 8000938:	200000b9 	.word	0x200000b9
 800093c:	200000b8 	.word	0x200000b8
 8000940:	20000098 	.word	0x20000098
 8000944:	200000ba 	.word	0x200000ba
 8000948:	2000014c 	.word	0x2000014c

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	b08f      	sub	sp, #60	; 0x3c
 8000950:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fbe1 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f879 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f97b 	bl	8000c54 <MX_GPIO_Init>
  MX_ADC1_Init();
 800095e:	f000 f8c5 	bl	8000aec <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000962:	f000 f94d 	bl	8000c00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000966:	f000 f8ff 	bl	8000b68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800096a:	482c      	ldr	r0, [pc, #176]	; (8000a1c <main+0xd0>)
 800096c:	f001 ffe8 	bl	8002940 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	492b      	ldr	r1, [pc, #172]	; (8000a20 <main+0xd4>)
 8000974:	482b      	ldr	r0, [pc, #172]	; (8000a24 <main+0xd8>)
 8000976:	f002 fc56 	bl	8003226 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f000 f9ab 	bl	8000cd8 <setTimer1>
  while (1)
  {
	  if (timer1_flag == 1) {
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <main+0xdc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d107      	bne.n	800099a <main+0x4e>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800098a:	2120      	movs	r1, #32
 800098c:	4827      	ldr	r0, [pc, #156]	; (8000a2c <main+0xe0>)
 800098e:	f001 fa9d 	bl	8001ecc <HAL_GPIO_TogglePin>
		  setTimer1(1000);
 8000992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000996:	f000 f99f 	bl	8000cd8 <setTimer1>
	  }
	  if (buffer_flag == 1) {
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <main+0xe4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d12a      	bne.n	80009f8 <main+0xac>
		  command_parser_fsm(hadc1);
 80009a2:	4e24      	ldr	r6, [pc, #144]	; (8000a34 <main+0xe8>)
 80009a4:	466d      	mov	r5, sp
 80009a6:	f106 0410 	add.w	r4, r6, #16
 80009aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009ba:	f7ff fda3 	bl	8000504 <command_parser_fsm>
			sprintf(c,"%d ",state_parser);
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <main+0xec>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	491d      	ldr	r1, [pc, #116]	; (8000a3c <main+0xf0>)
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <main+0xf4>)
 80009c8:	f003 f8b8 	bl	8003b3c <siprintf>
			HAL_UART_Transmit(&huart2 , &c , 4, 50);
 80009cc:	2332      	movs	r3, #50	; 0x32
 80009ce:	2204      	movs	r2, #4
 80009d0:	491b      	ldr	r1, [pc, #108]	; (8000a40 <main+0xf4>)
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <main+0xd8>)
 80009d4:	f002 fb95 	bl	8003102 <HAL_UART_Transmit>
			sprintf(c,"%d\r\n",last_state);
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <main+0xf8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	491a      	ldr	r1, [pc, #104]	; (8000a48 <main+0xfc>)
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <main+0xf4>)
 80009e2:	f003 f8ab 	bl	8003b3c <siprintf>
			HAL_UART_Transmit(&huart2 , &c , 4, 50);
 80009e6:	2332      	movs	r3, #50	; 0x32
 80009e8:	2204      	movs	r2, #4
 80009ea:	4915      	ldr	r1, [pc, #84]	; (8000a40 <main+0xf4>)
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0xd8>)
 80009ee:	f002 fb88 	bl	8003102 <HAL_UART_Transmit>
		  buffer_flag = 0;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <main+0xe4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communication_fsm(huart2);
 80009f8:	4e0a      	ldr	r6, [pc, #40]	; (8000a24 <main+0xd8>)
 80009fa:	466d      	mov	r5, sp
 80009fc:	f106 0410 	add.w	r4, r6, #16
 8000a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	602b      	str	r3, [r5, #0]
 8000a10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a14:	f000 fb0e 	bl	8001034 <uart_communication_fsm>
	  if (timer1_flag == 1) {
 8000a18:	e7b3      	b.n	8000982 <main+0x36>
 8000a1a:	bf00      	nop
 8000a1c:	20000104 	.word	0x20000104
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	2000014c 	.word	0x2000014c
 8000a28:	2000019c 	.word	0x2000019c
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	200000ba 	.word	0x200000ba
 8000a34:	200000d4 	.word	0x200000d4
 8000a38:	200000b6 	.word	0x200000b6
 8000a3c:	08004468 	.word	0x08004468
 8000a40:	20000190 	.word	0x20000190
 8000a44:	200000d0 	.word	0x200000d0
 8000a48:	0800446c 	.word	0x0800446c

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a56:	2228      	movs	r2, #40	; 0x28
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f866 	bl	8003b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2310      	movs	r3, #16
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fa35 	bl	8001f00 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a9c:	f000 f916 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fca2 	bl	8002404 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ac6:	f000 f901 	bl	8000ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aca:	2302      	movs	r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 fe2d 	bl	8002734 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae0:	f000 f8f4 	bl	8000ccc <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3750      	adds	r7, #80	; 0x50
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <MX_ADC1_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b2a:	f000 fb57 	bl	80011dc <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 f8ca 	bl	8000ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_ADC1_Init+0x74>)
 8000b4a:	f000 fcd9 	bl	8001500 <HAL_ADC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b54:	f000 f8ba 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000d4 	.word	0x200000d4
 8000b64:	40012400 	.word	0x40012400

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000bae:	f001 fe77 	bl	80028a0 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bb8:	f000 f888 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000bca:	f002 f80d 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 f87a 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_TIM2_Init+0x94>)
 8000be6:	f002 f9d5 	bl	8002f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f86c 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000104 	.word	0x20000104

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f002 fa16 	bl	8003068 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f843 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000014c 	.word	0x2000014c
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0x5c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <MX_GPIO_Init+0x5c>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_GPIO_Init+0x5c>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0x60>)
 8000c86:	f001 f909 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2302      	movs	r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_GPIO_Init+0x60>)
 8000ca2:	f000 ff7f 	bl	8001ba4 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cc0:	f000 f83e 	bl	8000d40 <timerRun>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <setTimer1>:
int timer1_counter = 0;
int timer2_counter = 0;
int timer1_flag = 0;
int timer2_flag = 0;

void setTimer1(int duration) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CYCLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <setTimer1+0x28>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <setTimer1+0x2c>)
 8000cec:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <setTimer1+0x30>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000194 	.word	0x20000194
 8000d08:	2000019c 	.word	0x2000019c

08000d0c <setTimer2>:

void setTimer2(int duration) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CYCLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <setTimer2+0x28>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1e:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <setTimer2+0x2c>)
 8000d20:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <setTimer2+0x30>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000198 	.word	0x20000198
 8000d3c:	200001a0 	.word	0x200001a0

08000d40 <timerRun>:

void timerRun() {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <timerRun+0x4c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dd0b      	ble.n	8000d64 <timerRun+0x24>
		timer1_counter--;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <timerRun+0x4c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <timerRun+0x4c>)
 8000d54:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <timerRun+0x4c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dc02      	bgt.n	8000d64 <timerRun+0x24>
			timer1_flag = 1;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <timerRun+0x50>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <timerRun+0x54>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dd0b      	ble.n	8000d84 <timerRun+0x44>
		timer2_counter--;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <timerRun+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <timerRun+0x54>)
 8000d74:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <timerRun+0x54>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc02      	bgt.n	8000d84 <timerRun+0x44>
			timer2_flag = 1;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <timerRun+0x58>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000194 	.word	0x20000194
 8000d90:	2000019c 	.word	0x2000019c
 8000d94:	20000198 	.word	0x20000198
 8000d98:	200001a0 	.word	0x200001a0

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x40>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_MspInit+0x40>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x40>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x40>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_ADC_MspInit+0x6c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d121      	bne.n	8000e44 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_ADC_MspInit+0x70>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	2303      	movs	r3, #3
 8000e36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_ADC_MspInit+0x74>)
 8000e40:	f000 feb0 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 fda5 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f000 fdbe 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_UART_MspInit+0x98>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d137      	bne.n	8000f30 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eca:	61d3      	str	r3, [r2, #28]
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_UART_MspInit+0xa0>)
 8000f04:	f000 fe4e 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_UART_MspInit+0xa0>)
 8000f1c:	f000 fe42 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2026      	movs	r0, #38	; 0x26
 8000f26:	f000 fd56 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2a:	2026      	movs	r0, #38	; 0x26
 8000f2c:	f000 fd6f 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f90b 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM2_IRQHandler+0x10>)
 8000f9a:	f001 fd1d 	bl	80029d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000104 	.word	0x20000104

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f002 f96b 	bl	8003288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000014c 	.word	0x2000014c

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f002 fd74 	bl	8003ad8 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20002800 	.word	0x20002800
 800101c:	00000400 	.word	0x00000400
 8001020:	200001a4 	.word	0x200001a4
 8001024:	200001c0 	.word	0x200001c0

08001028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <uart_communication_fsm>:
 *      Author: minhl
 */

#include "uart_communication_fsm.h"

void uart_communication_fsm(UART_HandleTypeDef huart2) {
 8001034:	b084      	sub	sp, #16
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
 800103a:	f107 0c08 	add.w	ip, r7, #8
 800103e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (state_uart) {
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <uart_communication_fsm+0x88>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b0c      	cmp	r3, #12
 8001048:	d01e      	beq.n	8001088 <uart_communication_fsm+0x54>
 800104a:	2b0c      	cmp	r3, #12
 800104c:	dc2b      	bgt.n	80010a6 <uart_communication_fsm+0x72>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <uart_communication_fsm+0x24>
 8001052:	2b0b      	cmp	r3, #11
 8001054:	d008      	beq.n	8001068 <uart_communication_fsm+0x34>
			if (command_flag == 0) {
				state_uart = INIT;
			}
			break;
		default:
			break;
 8001056:	e026      	b.n	80010a6 <uart_communication_fsm+0x72>
			if (command_flag == 1) {
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <uart_communication_fsm+0x8c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d124      	bne.n	80010aa <uart_communication_fsm+0x76>
				state_uart = SEND;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <uart_communication_fsm+0x88>)
 8001062:	220b      	movs	r2, #11
 8001064:	701a      	strb	r2, [r3, #0]
			break;
 8001066:	e020      	b.n	80010aa <uart_communication_fsm+0x76>
			HAL_UART_Transmit(&huart2, (void *) data, 12, 1000);
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	220c      	movs	r2, #12
 800106e:	4915      	ldr	r1, [pc, #84]	; (80010c4 <uart_communication_fsm+0x90>)
 8001070:	f107 0008 	add.w	r0, r7, #8
 8001074:	f002 f845 	bl	8003102 <HAL_UART_Transmit>
			setTimer2(3000);
 8001078:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800107c:	f7ff fe46 	bl	8000d0c <setTimer2>
			state_uart = WAIT;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <uart_communication_fsm+0x88>)
 8001082:	220c      	movs	r2, #12
 8001084:	701a      	strb	r2, [r3, #0]
			break;
 8001086:	e013      	b.n	80010b0 <uart_communication_fsm+0x7c>
			if (timer2_flag == 1) {
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <uart_communication_fsm+0x94>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <uart_communication_fsm+0x62>
				state_uart = SEND;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <uart_communication_fsm+0x88>)
 8001092:	220b      	movs	r2, #11
 8001094:	701a      	strb	r2, [r3, #0]
			if (command_flag == 0) {
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <uart_communication_fsm+0x8c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <uart_communication_fsm+0x7a>
				state_uart = INIT;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <uart_communication_fsm+0x88>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
			break;
 80010a4:	e003      	b.n	80010ae <uart_communication_fsm+0x7a>
			break;
 80010a6:	bf00      	nop
 80010a8:	e002      	b.n	80010b0 <uart_communication_fsm+0x7c>
			break;
 80010aa:	bf00      	nop
 80010ac:	e000      	b.n	80010b0 <uart_communication_fsm+0x7c>
			break;
 80010ae:	bf00      	nop
	}
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b8:	b004      	add	sp, #16
 80010ba:	4770      	bx	lr
 80010bc:	200000b7 	.word	0x200000b7
 80010c0:	200000bb 	.word	0x200000bb
 80010c4:	200000c4 	.word	0x200000c4
 80010c8:	200001a0 	.word	0x200001a0

080010cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	; (8001110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f2:	f7ff ff99 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f002 fcf5 	bl	8003ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fc27 	bl	800094c <main>
  bx lr
 80010fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001108:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 800110c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001110:	200001bc 	.word	0x200001bc

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 fc49 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	200f      	movs	r0, #15
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe32 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fc61 	bl	8001a2a <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 fc29 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000004 	.word	0x20000004
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	20000008 	.word	0x20000008

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	200001a8 	.word	0x200001a8

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	200001a8 	.word	0x200001a8

080011dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0be      	b.n	800137c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	2b00      	cmp	r3, #0
 800120a:	d109      	bne.n	8001220 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fde0 	bl	8000de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fabf 	bl	80017a4 <ADC_ConversionStop_Disable>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 8099 	bne.w	800136a <HAL_ADC_Init+0x18e>
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8095 	bne.w	800136a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001248:	f023 0302 	bic.w	r3, r3, #2
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800125c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7b1b      	ldrb	r3, [r3, #12]
 8001262:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001264:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	4313      	orrs	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001274:	d003      	beq.n	800127e <HAL_ADC_Init+0xa2>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HAL_ADC_Init+0xa8>
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	e000      	b.n	8001286 <HAL_ADC_Init+0xaa>
 8001284:	2300      	movs	r3, #0
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7d1b      	ldrb	r3, [r3, #20]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d119      	bne.n	80012c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7b1b      	ldrb	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	035a      	lsls	r2, r3, #13
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	e00b      	b.n	80012c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	f043 0220 	orr.w	r2, r3, #32
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_ADC_Init+0x1a8>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_Init+0x126>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d104      	bne.n	800130c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	3b01      	subs	r3, #1
 8001308:	051b      	lsls	r3, r3, #20
 800130a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	430a      	orrs	r2, r1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_ADC_Init+0x1ac>)
 8001328:	4013      	ands	r3, r2
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	d10b      	bne.n	8001348 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001346:	e018      	b.n	800137a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	f023 0312 	bic.w	r3, r3, #18
 8001350:	f043 0210 	orr.w	r2, r3, #16
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001368:	e007      	b.n	800137a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800137a:	7dfb      	ldrb	r3, [r7, #23]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	ffe1f7fd 	.word	0xffe1f7fd
 8001388:	ff1f0efe 	.word	0xff1f0efe

0800138c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start+0x1a>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e098      	b.n	80014d8 <HAL_ADC_Start+0x14c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f99e 	bl	80016f0 <ADC_Enable>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 8087 	bne.w	80014ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <HAL_ADC_Start+0x154>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d105      	bne.n	80013ea <HAL_ADC_Start+0x5e>
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_ADC_Start+0x158>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001400:	2b00      	cmp	r3, #0
 8001402:	d026      	beq.n	8001452 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800140c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001414:	e01d      	b.n	8001452 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <HAL_ADC_Start+0x158>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d004      	beq.n	8001436 <HAL_ADC_Start+0xaa>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <HAL_ADC_Start+0x154>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10d      	bne.n	8001452 <HAL_ADC_Start+0xc6>
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_ADC_Start+0x158>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800144a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f023 0206 	bic.w	r2, r3, #6
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
 800146a:	e002      	b.n	8001472 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0202 	mvn.w	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800148e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001492:	d113      	bne.n	80014bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_ADC_Start+0x154>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d105      	bne.n	80014aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_ADC_Start+0x158>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	e00c      	b.n	80014d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e003      	b.n	80014d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40012800 	.word	0x40012800
 80014e4:	40012400 	.word	0x40012400

080014e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x20>
 800151c:	2302      	movs	r3, #2
 800151e:	e0dc      	b.n	80016da <HAL_ADC_ConfigChannel+0x1da>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b06      	cmp	r3, #6
 800152e:	d81c      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3b05      	subs	r3, #5
 8001542:	221f      	movs	r2, #31
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	4019      	ands	r1, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b05      	subs	r3, #5
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
 8001568:	e03c      	b.n	80015e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d81c      	bhi.n	80015ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b23      	subs	r3, #35	; 0x23
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	4019      	ands	r1, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b23      	subs	r3, #35	; 0x23
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
 80015aa:	e01b      	b.n	80015e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b41      	subs	r3, #65	; 0x41
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4019      	ands	r1, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b41      	subs	r3, #65	; 0x41
 80015d8:	fa00 f203 	lsl.w	r2, r0, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d91c      	bls.n	8001626 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68d9      	ldr	r1, [r3, #12]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	3b1e      	subs	r3, #30
 80015fe:	2207      	movs	r2, #7
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	4019      	ands	r1, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6898      	ldr	r0, [r3, #8]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	3b1e      	subs	r3, #30
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e019      	b.n	800165a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6919      	ldr	r1, [r3, #16]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6898      	ldr	r0, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b10      	cmp	r3, #16
 8001660:	d003      	beq.n	800166a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001666:	2b11      	cmp	r3, #17
 8001668:	d132      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d125      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d126      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001690:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d11a      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <HAL_ADC_ConfigChannel+0x1ec>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x1b2>
 80016be:	e007      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f043 0220 	orr.w	r2, r3, #32
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40012400 	.word	0x40012400
 80016e8:	20000004 	.word	0x20000004
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d040      	beq.n	8001790 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <ADC_Enable+0xac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <ADC_Enable+0xb0>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800172c:	e002      	b.n	8001734 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3b01      	subs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f9      	bne.n	800172e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800173a:	f7ff fd45 	bl	80011c8 <HAL_GetTick>
 800173e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001740:	e01f      	b.n	8001782 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001742:	f7ff fd41 	bl	80011c8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d918      	bls.n	8001782 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d011      	beq.n	8001782 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	f043 0210 	orr.w	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e007      	b.n	8001792 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d1d8      	bne.n	8001742 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000004 	.word	0x20000004
 80017a0:	431bde83 	.word	0x431bde83

080017a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d12e      	bne.n	800181c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ce:	f7ff fcfb 	bl	80011c8 <HAL_GetTick>
 80017d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017d4:	e01b      	b.n	800180e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017d6:	f7ff fcf7 	bl	80011c8 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d914      	bls.n	800180e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10d      	bne.n	800180e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e007      	b.n	800181e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d0dc      	beq.n	80017d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <__NVIC_EnableIRQ+0x34>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff90 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff2d 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff42 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff90 	bl	8001918 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d008      	beq.n	8001a6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e020      	b.n	8001aac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 020e 	bic.w	r2, r2, #14
 8001a78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d005      	beq.n	8001ada <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e051      	b.n	8001b7e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 020e 	bic.w	r2, r2, #14
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_DMA_Abort_IT+0xd0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d029      	beq.n	8001b58 <HAL_DMA_Abort_IT+0xa0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HAL_DMA_Abort_IT+0xd4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d022      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x9c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_DMA_Abort_IT+0xd8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d01a      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x96>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_DMA_Abort_IT+0xdc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d012      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x90>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_DMA_Abort_IT+0xe0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d00a      	beq.n	8001b42 <HAL_DMA_Abort_IT+0x8a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_DMA_Abort_IT+0xe4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d102      	bne.n	8001b3c <HAL_DMA_Abort_IT+0x84>
 8001b36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b3a:	e00e      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b40:	e00b      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b46:	e008      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	e005      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b52:	e002      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b54:	2310      	movs	r3, #16
 8001b56:	e000      	b.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_DMA_Abort_IT+0xe8>)
 8001b5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
    } 
  }
  return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40020008 	.word	0x40020008
 8001b8c:	4002001c 	.word	0x4002001c
 8001b90:	40020030 	.word	0x40020030
 8001b94:	40020044 	.word	0x40020044
 8001b98:	40020058 	.word	0x40020058
 8001b9c:	4002006c 	.word	0x4002006c
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e161      	b.n	8001e7c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8150 	bne.w	8001e76 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a97      	ldr	r2, [pc, #604]	; (8001e38 <HAL_GPIO_Init+0x294>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d05e      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001be0:	4a95      	ldr	r2, [pc, #596]	; (8001e38 <HAL_GPIO_Init+0x294>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d875      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001be6:	4a95      	ldr	r2, [pc, #596]	; (8001e3c <HAL_GPIO_Init+0x298>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d058      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bec:	4a93      	ldr	r2, [pc, #588]	; (8001e3c <HAL_GPIO_Init+0x298>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d86f      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a93      	ldr	r2, [pc, #588]	; (8001e40 <HAL_GPIO_Init+0x29c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d052      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bf8:	4a91      	ldr	r2, [pc, #580]	; (8001e40 <HAL_GPIO_Init+0x29c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d869      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04c      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c04:	4a8f      	ldr	r2, [pc, #572]	; (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d863      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a8f      	ldr	r2, [pc, #572]	; (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d046      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c10:	4a8d      	ldr	r2, [pc, #564]	; (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d85d      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d82a      	bhi.n	8001c70 <HAL_GPIO_Init+0xcc>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d859      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_GPIO_Init+0x80>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001c8b 	.word	0x08001c8b
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001cd3 	.word	0x08001cd3
 8001c38:	08001cd3 	.word	0x08001cd3
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cd3 	.word	0x08001cd3
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001cd3 	.word	0x08001cd3
 8001c4c:	08001cd3 	.word	0x08001cd3
 8001c50:	08001cd3 	.word	0x08001cd3
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001cd3 	.word	0x08001cd3
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001cd3 	.word	0x08001cd3
 8001c64:	08001cd3 	.word	0x08001cd3
 8001c68:	08001c81 	.word	0x08001c81
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	4a76      	ldr	r2, [pc, #472]	; (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c76:	e02c      	b.n	8001cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e029      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	3304      	adds	r3, #4
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e024      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e01f      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e01a      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e013      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	611a      	str	r2, [r3, #16]
          break;
 8001cbe:	e009      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	615a      	str	r2, [r3, #20]
          break;
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          break;
 8001cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d801      	bhi.n	8001cde <HAL_GPIO_Init+0x13a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_Init+0x13e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d802      	bhi.n	8001cf0 <HAL_GPIO_Init+0x14c>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x152>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a9 	beq.w	8001e76 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d3c:	4a45      	ldr	r2, [pc, #276]	; (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3d      	ldr	r2, [pc, #244]	; (8001e58 <HAL_GPIO_Init+0x2b4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1e0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1dc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3b      	ldr	r2, [pc, #236]	; (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1d8>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x1e2>
 8001d84:	2300      	movs	r3, #0
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d96:	492f      	ldr	r1, [pc, #188]	; (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	492b      	ldr	r1, [pc, #172]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4927      	ldr	r1, [pc, #156]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	491d      	ldr	r1, [pc, #116]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	4917      	ldr	r1, [pc, #92]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4913      	ldr	r1, [pc, #76]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01f      	beq.n	8001e68 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	490d      	ldr	r1, [pc, #52]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e01f      	b.n	8001e76 <HAL_GPIO_Init+0x2d2>
 8001e36:	bf00      	nop
 8001e38:	10320000 	.word	0x10320000
 8001e3c:	10310000 	.word	0x10310000
 8001e40:	10220000 	.word	0x10220000
 8001e44:	10210000 	.word	0x10210000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <HAL_GPIO_Init+0x2f4>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	3301      	adds	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae96 	bne.w	8001bb8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	372c      	adds	r7, #44	; 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43d9      	mvns	r1, r3
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e272      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8087 	beq.w	800202e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d00c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f2c:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5e>
 8001f38:	4b8c      	ldr	r3, [pc, #560]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d10b      	bne.n	8001f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06c      	beq.n	800202c <HAL_RCC_OscConfig+0x12c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d168      	bne.n	800202c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e24c      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x76>
 8001f68:	4b80      	ldr	r3, [pc, #512]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a7f      	ldr	r2, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e02e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a77      	ldr	r2, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e01d      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0xbc>
 8001fa2:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a71      	ldr	r2, [pc, #452]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xd4>
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a67      	ldr	r2, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f8f4 	bl	80011c8 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f8f0 	bl	80011c8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e200      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe4>
 8002002:	e014      	b.n	800202e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f8e0 	bl	80011c8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f8dc 	bl	80011c8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1ec      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x10c>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b08      	cmp	r3, #8
 8002050:	d11c      	bne.n	800208c <HAL_RCC_OscConfig+0x18c>
 8002052:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_RCC_OscConfig+0x176>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d001      	beq.n	8002076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e1c0      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4939      	ldr	r1, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208a:	e03a      	b.n	8002102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff f895 	bl	80011c8 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff f891 	bl	80011c8 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e1a1      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff f874 	bl	80011c8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff f870 	bl	80011c8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e180      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d03a      	beq.n	8002184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d019      	beq.n	800214a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_RCC_OscConfig+0x274>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7ff f854 	bl	80011c8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff f850 	bl	80011c8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e160      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x26c>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fad8 	bl	80026f8 <RCC_Delay>
 8002148:	e01c      	b.n	8002184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x274>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff f83a 	bl	80011c8 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	e00f      	b.n	8002178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7ff f836 	bl	80011c8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d908      	bls.n	8002178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e146      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	42420000 	.word	0x42420000
 8002174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e9      	bne.n	8002158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80a6 	beq.w	80022de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b8b      	ldr	r3, [pc, #556]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a87      	ldr	r2, [pc, #540]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021be:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_RCC_OscConfig+0x4c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d118      	bne.n	80021fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ca:	4b7f      	ldr	r3, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x4c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <HAL_RCC_OscConfig+0x4c8>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fff7 	bl	80011c8 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021de:	f7fe fff3 	bl	80011c8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e103      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	4b75      	ldr	r3, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x4c8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x312>
 8002204:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e02d      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x334>
 800221a:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a69      	ldr	r2, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a66      	ldr	r2, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	e01c      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d10c      	bne.n	8002256 <HAL_RCC_OscConfig+0x356>
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a5d      	ldr	r2, [pc, #372]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	e00b      	b.n	800226e <HAL_RCC_OscConfig+0x36e>
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a5a      	ldr	r2, [pc, #360]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b58      	ldr	r3, [pc, #352]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a57      	ldr	r2, [pc, #348]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe ffa7 	bl	80011c8 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe ffa3 	bl	80011c8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f241 3288 	movw	r2, #5000	; 0x1388
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0b1      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0ee      	beq.n	800227e <HAL_RCC_OscConfig+0x37e>
 80022a0:	e014      	b.n	80022cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe ff91 	bl	80011c8 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe ff8d 	bl	80011c8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e09b      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d105      	bne.n	80022de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a3b      	ldr	r2, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8087 	beq.w	80023f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d061      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d146      	bne.n	800238a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fc:	4b33      	ldr	r3, [pc, #204]	; (80023cc <HAL_RCC_OscConfig+0x4cc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe ff61 	bl	80011c8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe ff5d 	bl	80011c8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e06d      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d108      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4921      	ldr	r1, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a19      	ldr	r1, [r3, #32]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	430b      	orrs	r3, r1
 8002356:	491b      	ldr	r1, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x4cc>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe ff31 	bl	80011c8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe ff2d 	bl	80011c8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e03d      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x46a>
 8002388:	e035      	b.n	80023f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_OscConfig+0x4cc>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe ff1a 	bl	80011c8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe ff16 	bl	80011c8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e026      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x498>
 80023b6:	e01e      	b.n	80023f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e019      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x500>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d0      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4965      	ldr	r1, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d040      	beq.n	8002524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e073      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4936      	ldr	r1, [pc, #216]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fe68 	bl	80011c8 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fe64 	bl	80011c8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e053      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4922      	ldr	r1, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1cc>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1d0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fdc6 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004484 	.word	0x08004484
 80025d0:	20000004 	.word	0x20000004
 80025d4:	20000008 	.word	0x20000008

080025d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b490      	push	{r4, r7}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_RCC_GetSysClockFreq+0xac>)
 80025e0:	1d3c      	adds	r4, r7, #4
 80025e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025e8:	f240 2301 	movw	r3, #513	; 0x201
 80025ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x40>
 8002612:	2b08      	cmp	r3, #8
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x46>
 8002616:	e02b      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002618:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_GetSysClockFreq+0xb4>)
 800261a:	623b      	str	r3, [r7, #32]
      break;
 800261c:	e02b      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	0c9b      	lsrs	r3, r3, #18
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3328      	adds	r3, #40	; 0x28
 8002628:	443b      	add	r3, r7
 800262a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800262e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb0>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	3328      	adds	r3, #40	; 0x28
 8002646:	443b      	add	r3, r7
 8002648:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800264c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	fb03 f202 	mul.w	r2, r3, r2
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	e004      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	623b      	str	r3, [r7, #32]
      break;
 800266e:	e002      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002672:	623b      	str	r3, [r7, #32]
      break;
 8002674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002676:	6a3b      	ldr	r3, [r7, #32]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc90      	pop	{r4, r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	08004474 	.word	0x08004474
 8002688:	40021000 	.word	0x40021000
 800268c:	007a1200 	.word	0x007a1200
 8002690:	003d0900 	.word	0x003d0900

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08004494 	.word	0x08004494

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffde 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08004494 	.word	0x08004494

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000004 	.word	0x20000004
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07d      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002754:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	61d3      	str	r3, [r2, #28]
 800276c:	4b49      	ldr	r3, [pc, #292]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d118      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002794:	f7fe fd18 	bl	80011c8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	e008      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fd14 	bl	80011c8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06d      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02e      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d027      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ee:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fce3 	bl	80011c8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fcdf 	bl	80011c8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e036      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4917      	ldr	r1, [pc, #92]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	4313      	orrs	r3, r2
 8002838:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a13      	ldr	r2, [pc, #76]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	490b      	ldr	r1, [pc, #44]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4904      	ldr	r1, [pc, #16]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	42420440 	.word	0x42420440

080028a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e041      	b.n	8002936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fac6 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 fa6a 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e035      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x4e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d004      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x4e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_TIM_Base_Start_IT+0x94>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d111      	bne.n	80029b2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d010      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	e007      	b.n	80029c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0202 	mvn.w	r2, #2
 8002a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9b1 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f9a4 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f9b3 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0204 	mvn.w	r2, #4
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f987 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f97a 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f989 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0208 	mvn.w	r2, #8
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f95d 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f950 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f95f 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0210 	mvn.w	r2, #16
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2208      	movs	r2, #8
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f933 	bl	8002d82 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f926 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f935 	bl	8002d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0201 	mvn.w	r2, #1
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe f8ae 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d107      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa67 	bl	8003056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8f9 	bl	8002da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d10e      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d107      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0220 	mvn.w	r2, #32
 8002bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa32 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_ConfigClockSource+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0b3      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x180>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c38:	d03e      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0xd0>
 8002c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3e:	f200 8087 	bhi.w	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c46:	f000 8085 	beq.w	8002d54 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	d87f      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b70      	cmp	r3, #112	; 0x70
 8002c52:	d01a      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xa2>
 8002c54:	2b70      	cmp	r3, #112	; 0x70
 8002c56:	d87b      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c58:	2b60      	cmp	r3, #96	; 0x60
 8002c5a:	d050      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x116>
 8002c5c:	2b60      	cmp	r3, #96	; 0x60
 8002c5e:	d877      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b50      	cmp	r3, #80	; 0x50
 8002c62:	d03c      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xf6>
 8002c64:	2b50      	cmp	r3, #80	; 0x50
 8002c66:	d873      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d058      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x136>
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d86f      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c70:	2b30      	cmp	r3, #48	; 0x30
 8002c72:	d064      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x156>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	d86b      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d060      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x156>
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d867      	bhi.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d05c      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x156>
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d05a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c88:	e062      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f000 f95c 	bl	8002f56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	609a      	str	r2, [r3, #8]
      break;
 8002cb6:	e04e      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f000 f945 	bl	8002f56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cda:	609a      	str	r2, [r3, #8]
      break;
 8002cdc:	e03b      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f8bc 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2150      	movs	r1, #80	; 0x50
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f913 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e02b      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f8da 	bl	8002ec4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2160      	movs	r1, #96	; 0x60
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f903 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e01b      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f89c 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2140      	movs	r1, #64	; 0x40
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f8f3 	bl	8002f22 <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e00b      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f000 f8ea 	bl	8002f22 <TIM_ITRx_SetConfig>
        break;
 8002d4e:	e002      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d50:	bf00      	nop
 8002d52:	e000      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <TIM_Base_SetConfig+0xa8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x28>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x28>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <TIM_Base_SetConfig+0xac>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <TIM_Base_SetConfig+0xa8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_Base_SetConfig+0x52>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d003      	beq.n	8002e0a <TIM_Base_SetConfig+0x52>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <TIM_Base_SetConfig+0xac>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <TIM_Base_SetConfig+0xa8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 030a 	bic.w	r3, r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 0210 	bic.w	r2, r3, #16
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	031b      	lsls	r3, r3, #12
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	621a      	str	r2, [r3, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f043 0307 	orr.w	r3, r3, #7
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b087      	sub	sp, #28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	609a      	str	r2, [r3, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e041      	b.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d009      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d004      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10c      	bne.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40000400 	.word	0x40000400

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e03f      	b.n	80030fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd ff06 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fc85 	bl	80039bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08a      	sub	sp, #40	; 0x28
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d17c      	bne.n	800321c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Transmit+0x2c>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e075      	b.n	800321e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_UART_Transmit+0x3e>
 800313c:	2302      	movs	r3, #2
 800313e:	e06e      	b.n	800321e <HAL_UART_Transmit+0x11c>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2221      	movs	r2, #33	; 0x21
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003156:	f7fe f837 	bl	80011c8 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d108      	bne.n	8003184 <HAL_UART_Transmit+0x82>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	e003      	b.n	800318c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003194:	e02a      	b.n	80031ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fa38 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e036      	b.n	800321e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3302      	adds	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e007      	b.n	80031de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1cf      	bne.n	8003196 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa08 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e006      	b.n	800321e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	d11d      	bne.n	800327c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Receive_IT+0x26>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e016      	b.n	800327e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_UART_Receive_IT+0x38>
 800325a:	2302      	movs	r3, #2
 800325c:	e00f      	b.n	800327e <HAL_UART_Receive_IT+0x58>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	461a      	mov	r2, r3
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa19 	bl	80036aa <UART_Start_Receive_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	e000      	b.n	800327e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_UART_IRQHandler+0x52>
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fac9 	bl	800386a <UART_Receive_IT>
      return;
 80032d8:	e17b      	b.n	80035d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80b1 	beq.w	8003444 <HAL_UART_IRQHandler+0x1bc>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_UART_IRQHandler+0x70>
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a6 	beq.w	8003444 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_UART_IRQHandler+0x90>
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_UART_IRQHandler+0xb0>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0202 	orr.w	r2, r3, #2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_UART_IRQHandler+0xd0>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00f      	beq.n	8003382 <HAL_UART_IRQHandler+0xfa>
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_UART_IRQHandler+0xee>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f043 0208 	orr.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 811e 	beq.w	80035c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_UART_IRQHandler+0x11e>
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa62 	bl	800386a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_UART_IRQHandler+0x146>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d031      	beq.n	8003432 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9a4 	bl	800371c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d023      	beq.n	800342a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d013      	beq.n	8003422 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	4a76      	ldr	r2, [pc, #472]	; (80035d8 <HAL_UART_IRQHandler+0x350>)
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fb56 	bl	8001ab8 <HAL_DMA_Abort_IT>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800341c:	4610      	mov	r0, r2
 800341e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e00e      	b.n	8003440 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8e3 	bl	80035ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	e00a      	b.n	8003440 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8df 	bl	80035ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e006      	b.n	8003440 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8db 	bl	80035ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800343e:	e0c3      	b.n	80035c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	bf00      	nop
    return;
 8003442:	e0c1      	b.n	80035c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 80a1 	bne.w	8003590 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 809b 	beq.w	8003590 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8095 	beq.w	8003590 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04e      	beq.n	8003528 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003494:	8a3b      	ldrh	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8098 	beq.w	80035cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a0:	8a3a      	ldrh	r2, [r7, #16]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	f080 8092 	bcs.w	80035cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8a3a      	ldrh	r2, [r7, #16]
 80034ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d02b      	beq.n	8003510 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0210 	bic.w	r2, r2, #16
 8003504:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fa99 	bl	8001a42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003518:	b29b      	uxth	r3, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	b29b      	uxth	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f86d 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003526:	e051      	b.n	80035cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d047      	beq.n	80035d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003540:	8a7b      	ldrh	r3, [r7, #18]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003554:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003584:	8a7b      	ldrh	r3, [r7, #18]
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f839 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800358e:	e01f      	b.n	80035d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_UART_IRQHandler+0x324>
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8f9 	bl	800379c <UART_Transmit_IT>
    return;
 80035aa:	e012      	b.n	80035d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_UART_IRQHandler+0x34a>
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f93a 	bl	800383a <UART_EndTransmit_IT>
    return;
 80035c6:	e004      	b.n	80035d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80035c8:	bf00      	nop
 80035ca:	e002      	b.n	80035d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80035d0:	bf00      	nop
  }
}
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08003775 	.word	0x08003775

080035dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	e02c      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d028      	beq.n	8003682 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x30>
 8003636:	f7fd fdc7 	bl	80011c8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	429a      	cmp	r2, r3
 8003644:	d21d      	bcs.n	8003682 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003654:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e00f      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d0c3      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	88fa      	ldrh	r2, [r7, #6]
 80036c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2222      	movs	r2, #34	; 0x22
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003732:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0210 	bic.w	r2, r2, #16
 800375a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff ff2d 	bl	80035ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b21      	cmp	r3, #33	; 0x21
 80037ae:	d13e      	bne.n	800382e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d114      	bne.n	80037e4 <UART_Transmit_IT+0x48>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d110      	bne.n	80037e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]
 80037e2:	e008      	b.n	80037f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	1c59      	adds	r1, r3, #1
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6211      	str	r1, [r2, #32]
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4619      	mov	r1, r3
 8003804:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003818:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003828:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff febe 	bl	80035dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b22      	cmp	r3, #34	; 0x22
 800387c:	f040 8099 	bne.w	80039b2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003888:	d117      	bne.n	80038ba <UART_Receive_IT+0x50>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d113      	bne.n	80038ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e026      	b.n	8003908 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038cc:	d007      	beq.n	80038de <UART_Receive_IT+0x74>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <UART_Receive_IT+0x82>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e008      	b.n	80038fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29b      	uxth	r3, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003918:	2b00      	cmp	r3, #0
 800391a:	d148      	bne.n	80039ae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0220 	bic.w	r2, r2, #32
 800392a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800393a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	2b01      	cmp	r3, #1
 800395a:	d123      	bne.n	80039a4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0210 	bic.w	r2, r2, #16
 8003970:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d10a      	bne.n	8003996 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800399a:	4619      	mov	r1, r3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fe2f 	bl	8003600 <HAL_UARTEx_RxEventCallback>
 80039a2:	e002      	b.n	80039aa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7fc ff9b 	bl	80008e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e002      	b.n	80039b4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039f6:	f023 030c 	bic.w	r3, r3, #12
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <UART_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fe54 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	e002      	b.n	8003a32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7fe fe3c 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003a30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <UART_SetConfig+0x118>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	0119      	lsls	r1, r3, #4
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <UART_SetConfig+0x118>)
 8003a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2064      	movs	r0, #100	; 0x64
 8003a72:	fb00 f303 	mul.w	r3, r0, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	3332      	adds	r3, #50	; 0x32
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <UART_SetConfig+0x118>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a88:	4419      	add	r1, r3
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <UART_SetConfig+0x118>)
 8003aa2:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2064      	movs	r0, #100	; 0x64
 8003aaa:	fb00 f303 	mul.w	r3, r0, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	3332      	adds	r3, #50	; 0x32
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <UART_SetConfig+0x118>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	51eb851f 	.word	0x51eb851f

08003ad8 <__errno>:
 8003ad8:	4b01      	ldr	r3, [pc, #4]	; (8003ae0 <__errno+0x8>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000010 	.word	0x20000010

08003ae4 <__libc_init_array>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	4d0c      	ldr	r5, [pc, #48]	; (8003b1c <__libc_init_array+0x38>)
 8003aea:	4c0d      	ldr	r4, [pc, #52]	; (8003b20 <__libc_init_array+0x3c>)
 8003aec:	1b64      	subs	r4, r4, r5
 8003aee:	10a4      	asrs	r4, r4, #2
 8003af0:	42a6      	cmp	r6, r4
 8003af2:	d109      	bne.n	8003b08 <__libc_init_array+0x24>
 8003af4:	f000 fc9c 	bl	8004430 <_init>
 8003af8:	2600      	movs	r6, #0
 8003afa:	4d0a      	ldr	r5, [pc, #40]	; (8003b24 <__libc_init_array+0x40>)
 8003afc:	4c0a      	ldr	r4, [pc, #40]	; (8003b28 <__libc_init_array+0x44>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	42a6      	cmp	r6, r4
 8003b04:	d105      	bne.n	8003b12 <__libc_init_array+0x2e>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0c:	4798      	blx	r3
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7ee      	b.n	8003af0 <__libc_init_array+0xc>
 8003b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b16:	4798      	blx	r3
 8003b18:	3601      	adds	r6, #1
 8003b1a:	e7f2      	b.n	8003b02 <__libc_init_array+0x1e>
 8003b1c:	080044d0 	.word	0x080044d0
 8003b20:	080044d0 	.word	0x080044d0
 8003b24:	080044d0 	.word	0x080044d0
 8003b28:	080044d4 	.word	0x080044d4

08003b2c <memset>:
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4402      	add	r2, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <siprintf>:
 8003b3c:	b40e      	push	{r1, r2, r3}
 8003b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b42:	b500      	push	{lr}
 8003b44:	b09c      	sub	sp, #112	; 0x70
 8003b46:	ab1d      	add	r3, sp, #116	; 0x74
 8003b48:	9002      	str	r0, [sp, #8]
 8003b4a:	9006      	str	r0, [sp, #24]
 8003b4c:	9107      	str	r1, [sp, #28]
 8003b4e:	9104      	str	r1, [sp, #16]
 8003b50:	4808      	ldr	r0, [pc, #32]	; (8003b74 <siprintf+0x38>)
 8003b52:	4909      	ldr	r1, [pc, #36]	; (8003b78 <siprintf+0x3c>)
 8003b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b58:	9105      	str	r1, [sp, #20]
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	a902      	add	r1, sp, #8
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	f000 f868 	bl	8003c34 <_svfiprintf_r>
 8003b64:	2200      	movs	r2, #0
 8003b66:	9b02      	ldr	r3, [sp, #8]
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	b01c      	add	sp, #112	; 0x70
 8003b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b70:	b003      	add	sp, #12
 8003b72:	4770      	bx	lr
 8003b74:	20000010 	.word	0x20000010
 8003b78:	ffff0208 	.word	0xffff0208

08003b7c <__ssputs_r>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	688e      	ldr	r6, [r1, #8]
 8003b82:	4682      	mov	sl, r0
 8003b84:	429e      	cmp	r6, r3
 8003b86:	460c      	mov	r4, r1
 8003b88:	4690      	mov	r8, r2
 8003b8a:	461f      	mov	r7, r3
 8003b8c:	d838      	bhi.n	8003c00 <__ssputs_r+0x84>
 8003b8e:	898a      	ldrh	r2, [r1, #12]
 8003b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b94:	d032      	beq.n	8003bfc <__ssputs_r+0x80>
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	6909      	ldr	r1, [r1, #16]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	eba5 0901 	sub.w	r9, r5, r1
 8003ba0:	6965      	ldr	r5, [r4, #20]
 8003ba2:	444b      	add	r3, r9
 8003ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bac:	106d      	asrs	r5, r5, #1
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf38      	it	cc
 8003bb2:	461d      	movcc	r5, r3
 8003bb4:	0553      	lsls	r3, r2, #21
 8003bb6:	d531      	bpl.n	8003c1c <__ssputs_r+0xa0>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f000 fb6f 	bl	800429c <_malloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	b950      	cbnz	r0, 8003bd8 <__ssputs_r+0x5c>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	f8ca 3000 	str.w	r3, [sl]
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd2:	81a3      	strh	r3, [r4, #12]
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	464a      	mov	r2, r9
 8003bda:	6921      	ldr	r1, [r4, #16]
 8003bdc:	f000 face 	bl	800417c <memcpy>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	6126      	str	r6, [r4, #16]
 8003bee:	444e      	add	r6, r9
 8003bf0:	6026      	str	r6, [r4, #0]
 8003bf2:	463e      	mov	r6, r7
 8003bf4:	6165      	str	r5, [r4, #20]
 8003bf6:	eba5 0509 	sub.w	r5, r5, r9
 8003bfa:	60a5      	str	r5, [r4, #8]
 8003bfc:	42be      	cmp	r6, r7
 8003bfe:	d900      	bls.n	8003c02 <__ssputs_r+0x86>
 8003c00:	463e      	mov	r6, r7
 8003c02:	4632      	mov	r2, r6
 8003c04:	4641      	mov	r1, r8
 8003c06:	6820      	ldr	r0, [r4, #0]
 8003c08:	f000 fac6 	bl	8004198 <memmove>
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	2000      	movs	r0, #0
 8003c10:	1b9b      	subs	r3, r3, r6
 8003c12:	60a3      	str	r3, [r4, #8]
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	4433      	add	r3, r6
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	e7db      	b.n	8003bd4 <__ssputs_r+0x58>
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	f000 fbb1 	bl	8004384 <_realloc_r>
 8003c22:	4606      	mov	r6, r0
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1e1      	bne.n	8003bec <__ssputs_r+0x70>
 8003c28:	4650      	mov	r0, sl
 8003c2a:	6921      	ldr	r1, [r4, #16]
 8003c2c:	f000 face 	bl	80041cc <_free_r>
 8003c30:	e7c7      	b.n	8003bc2 <__ssputs_r+0x46>
	...

08003c34 <_svfiprintf_r>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	4698      	mov	r8, r3
 8003c3a:	898b      	ldrh	r3, [r1, #12]
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	460d      	mov	r5, r1
 8003c42:	4614      	mov	r4, r2
 8003c44:	b09d      	sub	sp, #116	; 0x74
 8003c46:	d50e      	bpl.n	8003c66 <_svfiprintf_r+0x32>
 8003c48:	690b      	ldr	r3, [r1, #16]
 8003c4a:	b963      	cbnz	r3, 8003c66 <_svfiprintf_r+0x32>
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	f000 fb25 	bl	800429c <_malloc_r>
 8003c52:	6028      	str	r0, [r5, #0]
 8003c54:	6128      	str	r0, [r5, #16]
 8003c56:	b920      	cbnz	r0, 8003c62 <_svfiprintf_r+0x2e>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e0d1      	b.n	8003e06 <_svfiprintf_r+0x1d2>
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	616b      	str	r3, [r5, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	f04f 0901 	mov.w	r9, #1
 8003c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e20 <_svfiprintf_r+0x1ec>
 8003c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c82:	4623      	mov	r3, r4
 8003c84:	469a      	mov	sl, r3
 8003c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8a:	b10a      	cbz	r2, 8003c90 <_svfiprintf_r+0x5c>
 8003c8c:	2a25      	cmp	r2, #37	; 0x25
 8003c8e:	d1f9      	bne.n	8003c84 <_svfiprintf_r+0x50>
 8003c90:	ebba 0b04 	subs.w	fp, sl, r4
 8003c94:	d00b      	beq.n	8003cae <_svfiprintf_r+0x7a>
 8003c96:	465b      	mov	r3, fp
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7ff ff6d 	bl	8003b7c <__ssputs_r>
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f000 80aa 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003caa:	445a      	add	r2, fp
 8003cac:	9209      	str	r2, [sp, #36]	; 0x24
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a2 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc2:	f10a 0a01 	add.w	sl, sl, #1
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	9307      	str	r3, [sp, #28]
 8003cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cce:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd0:	4654      	mov	r4, sl
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd8:	4851      	ldr	r0, [pc, #324]	; (8003e20 <_svfiprintf_r+0x1ec>)
 8003cda:	f000 fa41 	bl	8004160 <memchr>
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	b9d8      	cbnz	r0, 8003d1a <_svfiprintf_r+0xe6>
 8003ce2:	06d0      	lsls	r0, r2, #27
 8003ce4:	bf44      	itt	mi
 8003ce6:	2320      	movmi	r3, #32
 8003ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cec:	0711      	lsls	r1, r2, #28
 8003cee:	bf44      	itt	mi
 8003cf0:	232b      	movmi	r3, #43	; 0x2b
 8003cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d015      	beq.n	8003d2a <_svfiprintf_r+0xf6>
 8003cfe:	4654      	mov	r4, sl
 8003d00:	2000      	movs	r0, #0
 8003d02:	f04f 0c0a 	mov.w	ip, #10
 8003d06:	9a07      	ldr	r2, [sp, #28]
 8003d08:	4621      	mov	r1, r4
 8003d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0e:	3b30      	subs	r3, #48	; 0x30
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d94e      	bls.n	8003db2 <_svfiprintf_r+0x17e>
 8003d14:	b1b0      	cbz	r0, 8003d44 <_svfiprintf_r+0x110>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e014      	b.n	8003d44 <_svfiprintf_r+0x110>
 8003d1a:	eba0 0308 	sub.w	r3, r0, r8
 8003d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	46a2      	mov	sl, r4
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	e7d2      	b.n	8003cd0 <_svfiprintf_r+0x9c>
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	1d19      	adds	r1, r3, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	9103      	str	r1, [sp, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bfbb      	ittet	lt
 8003d36:	425b      	neglt	r3, r3
 8003d38:	f042 0202 	orrlt.w	r2, r2, #2
 8003d3c:	9307      	strge	r3, [sp, #28]
 8003d3e:	9307      	strlt	r3, [sp, #28]
 8003d40:	bfb8      	it	lt
 8003d42:	9204      	strlt	r2, [sp, #16]
 8003d44:	7823      	ldrb	r3, [r4, #0]
 8003d46:	2b2e      	cmp	r3, #46	; 0x2e
 8003d48:	d10c      	bne.n	8003d64 <_svfiprintf_r+0x130>
 8003d4a:	7863      	ldrb	r3, [r4, #1]
 8003d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4e:	d135      	bne.n	8003dbc <_svfiprintf_r+0x188>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	3402      	adds	r4, #2
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e24 <_svfiprintf_r+0x1f0>
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4650      	mov	r0, sl
 8003d6c:	7821      	ldrb	r1, [r4, #0]
 8003d6e:	f000 f9f7 	bl	8004160 <memchr>
 8003d72:	b140      	cbz	r0, 8003d86 <_svfiprintf_r+0x152>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	eba0 000a 	sub.w	r0, r0, sl
 8003d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	3401      	adds	r4, #1
 8003d82:	4303      	orrs	r3, r0
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	4826      	ldr	r0, [pc, #152]	; (8003e28 <_svfiprintf_r+0x1f4>)
 8003d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d92:	f000 f9e5 	bl	8004160 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d038      	beq.n	8003e0c <_svfiprintf_r+0x1d8>
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <_svfiprintf_r+0x1f8>)
 8003d9c:	bb1b      	cbnz	r3, 8003de6 <_svfiprintf_r+0x1b2>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	3308      	adds	r3, #8
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dac:	4433      	add	r3, r6
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	e767      	b.n	8003c82 <_svfiprintf_r+0x4e>
 8003db2:	460c      	mov	r4, r1
 8003db4:	2001      	movs	r0, #1
 8003db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dba:	e7a5      	b.n	8003d08 <_svfiprintf_r+0xd4>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	3401      	adds	r4, #1
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dce:	3a30      	subs	r2, #48	; 0x30
 8003dd0:	2a09      	cmp	r2, #9
 8003dd2:	d903      	bls.n	8003ddc <_svfiprintf_r+0x1a8>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0c5      	beq.n	8003d64 <_svfiprintf_r+0x130>
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	e7c3      	b.n	8003d64 <_svfiprintf_r+0x130>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	2301      	movs	r3, #1
 8003de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de4:	e7f0      	b.n	8003dc8 <_svfiprintf_r+0x194>
 8003de6:	ab03      	add	r3, sp, #12
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	462a      	mov	r2, r5
 8003dec:	4638      	mov	r0, r7
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <_svfiprintf_r+0x1fc>)
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	f3af 8000 	nop.w
 8003df6:	1c42      	adds	r2, r0, #1
 8003df8:	4606      	mov	r6, r0
 8003dfa:	d1d6      	bne.n	8003daa <_svfiprintf_r+0x176>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	065b      	lsls	r3, r3, #25
 8003e00:	f53f af2c 	bmi.w	8003c5c <_svfiprintf_r+0x28>
 8003e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e06:	b01d      	add	sp, #116	; 0x74
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	462a      	mov	r2, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <_svfiprintf_r+0x1fc>)
 8003e16:	a904      	add	r1, sp, #16
 8003e18:	f000 f87c 	bl	8003f14 <_printf_i>
 8003e1c:	e7eb      	b.n	8003df6 <_svfiprintf_r+0x1c2>
 8003e1e:	bf00      	nop
 8003e20:	0800449c 	.word	0x0800449c
 8003e24:	080044a2 	.word	0x080044a2
 8003e28:	080044a6 	.word	0x080044a6
 8003e2c:	00000000 	.word	0x00000000
 8003e30:	08003b7d 	.word	0x08003b7d

08003e34 <_printf_common>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	4616      	mov	r6, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	688a      	ldr	r2, [r1, #8]
 8003e3e:	690b      	ldr	r3, [r1, #16]
 8003e40:	4607      	mov	r7, r0
 8003e42:	4293      	cmp	r3, r2
 8003e44:	bfb8      	it	lt
 8003e46:	4613      	movlt	r3, r2
 8003e48:	6033      	str	r3, [r6, #0]
 8003e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e4e:	460c      	mov	r4, r1
 8003e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e54:	b10a      	cbz	r2, 8003e5a <_printf_common+0x26>
 8003e56:	3301      	adds	r3, #1
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	0699      	lsls	r1, r3, #26
 8003e5e:	bf42      	ittt	mi
 8003e60:	6833      	ldrmi	r3, [r6, #0]
 8003e62:	3302      	addmi	r3, #2
 8003e64:	6033      	strmi	r3, [r6, #0]
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	f015 0506 	ands.w	r5, r5, #6
 8003e6c:	d106      	bne.n	8003e7c <_printf_common+0x48>
 8003e6e:	f104 0a19 	add.w	sl, r4, #25
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	6832      	ldr	r2, [r6, #0]
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	42ab      	cmp	r3, r5
 8003e7a:	dc28      	bgt.n	8003ece <_printf_common+0x9a>
 8003e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e80:	1e13      	subs	r3, r2, #0
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	0692      	lsls	r2, r2, #26
 8003e8a:	d42d      	bmi.n	8003ee8 <_printf_common+0xb4>
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d020      	beq.n	8003edc <_printf_common+0xa8>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	68e5      	ldr	r5, [r4, #12]
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf18      	it	ne
 8003ea6:	2500      	movne	r5, #0
 8003ea8:	6832      	ldr	r2, [r6, #0]
 8003eaa:	f04f 0600 	mov.w	r6, #0
 8003eae:	68a3      	ldr	r3, [r4, #8]
 8003eb0:	bf08      	it	eq
 8003eb2:	1aad      	subeq	r5, r5, r2
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	bf08      	it	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfc4      	itt	gt
 8003ec0:	1a9b      	subgt	r3, r3, r2
 8003ec2:	18ed      	addgt	r5, r5, r3
 8003ec4:	341a      	adds	r4, #26
 8003ec6:	42b5      	cmp	r5, r6
 8003ec8:	d11a      	bne.n	8003f00 <_printf_common+0xcc>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e008      	b.n	8003ee0 <_printf_common+0xac>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	47c0      	blx	r8
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d103      	bne.n	8003ee4 <_printf_common+0xb0>
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	3501      	adds	r5, #1
 8003ee6:	e7c4      	b.n	8003e72 <_printf_common+0x3e>
 8003ee8:	2030      	movs	r0, #48	; 0x30
 8003eea:	18e1      	adds	r1, r4, r3
 8003eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef6:	4422      	add	r2, r4
 8003ef8:	3302      	adds	r3, #2
 8003efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efe:	e7c5      	b.n	8003e8c <_printf_common+0x58>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4622      	mov	r2, r4
 8003f04:	4649      	mov	r1, r9
 8003f06:	4638      	mov	r0, r7
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0e6      	beq.n	8003edc <_printf_common+0xa8>
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7d9      	b.n	8003ec6 <_printf_common+0x92>
	...

08003f14 <_printf_i>:
 8003f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	7e0f      	ldrb	r7, [r1, #24]
 8003f1a:	4691      	mov	r9, r2
 8003f1c:	2f78      	cmp	r7, #120	; 0x78
 8003f1e:	4680      	mov	r8, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	469a      	mov	sl, r3
 8003f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f2a:	d807      	bhi.n	8003f3c <_printf_i+0x28>
 8003f2c:	2f62      	cmp	r7, #98	; 0x62
 8003f2e:	d80a      	bhi.n	8003f46 <_printf_i+0x32>
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	f000 80d9 	beq.w	80040e8 <_printf_i+0x1d4>
 8003f36:	2f58      	cmp	r7, #88	; 0x58
 8003f38:	f000 80a4 	beq.w	8004084 <_printf_i+0x170>
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f44:	e03a      	b.n	8003fbc <_printf_i+0xa8>
 8003f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f4a:	2b15      	cmp	r3, #21
 8003f4c:	d8f6      	bhi.n	8003f3c <_printf_i+0x28>
 8003f4e:	a101      	add	r1, pc, #4	; (adr r1, 8003f54 <_printf_i+0x40>)
 8003f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08003f3d 	.word	0x08003f3d
 8003f60:	08003f3d 	.word	0x08003f3d
 8003f64:	08003f3d 	.word	0x08003f3d
 8003f68:	08003f3d 	.word	0x08003f3d
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003f3d 	.word	0x08003f3d
 8003f74:	08003f3d 	.word	0x08003f3d
 8003f78:	08003f3d 	.word	0x08003f3d
 8003f7c:	08003f3d 	.word	0x08003f3d
 8003f80:	080040cf 	.word	0x080040cf
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	080040b1 	.word	0x080040b1
 8003f8c:	08003f3d 	.word	0x08003f3d
 8003f90:	08003f3d 	.word	0x08003f3d
 8003f94:	080040f1 	.word	0x080040f1
 8003f98:	08003f3d 	.word	0x08003f3d
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003f3d 	.word	0x08003f3d
 8003fa4:	08003f3d 	.word	0x08003f3d
 8003fa8:	080040b9 	.word	0x080040b9
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	602a      	str	r2, [r5, #0]
 8003fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0a4      	b.n	800410a <_printf_i+0x1f6>
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	6829      	ldr	r1, [r5, #0]
 8003fc4:	0606      	lsls	r6, r0, #24
 8003fc6:	f101 0304 	add.w	r3, r1, #4
 8003fca:	d50a      	bpl.n	8003fe2 <_printf_i+0xce>
 8003fcc:	680e      	ldr	r6, [r1, #0]
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	2e00      	cmp	r6, #0
 8003fd2:	da03      	bge.n	8003fdc <_printf_i+0xc8>
 8003fd4:	232d      	movs	r3, #45	; 0x2d
 8003fd6:	4276      	negs	r6, r6
 8003fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fdc:	230a      	movs	r3, #10
 8003fde:	485e      	ldr	r0, [pc, #376]	; (8004158 <_printf_i+0x244>)
 8003fe0:	e019      	b.n	8004016 <_printf_i+0x102>
 8003fe2:	680e      	ldr	r6, [r1, #0]
 8003fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	bf18      	it	ne
 8003fec:	b236      	sxthne	r6, r6
 8003fee:	e7ef      	b.n	8003fd0 <_printf_i+0xbc>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	1d19      	adds	r1, r3, #4
 8003ff6:	6029      	str	r1, [r5, #0]
 8003ff8:	0601      	lsls	r1, r0, #24
 8003ffa:	d501      	bpl.n	8004000 <_printf_i+0xec>
 8003ffc:	681e      	ldr	r6, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <_printf_i+0xf2>
 8004000:	0646      	lsls	r6, r0, #25
 8004002:	d5fb      	bpl.n	8003ffc <_printf_i+0xe8>
 8004004:	881e      	ldrh	r6, [r3, #0]
 8004006:	2f6f      	cmp	r7, #111	; 0x6f
 8004008:	bf0c      	ite	eq
 800400a:	2308      	moveq	r3, #8
 800400c:	230a      	movne	r3, #10
 800400e:	4852      	ldr	r0, [pc, #328]	; (8004158 <_printf_i+0x244>)
 8004010:	2100      	movs	r1, #0
 8004012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004016:	6865      	ldr	r5, [r4, #4]
 8004018:	2d00      	cmp	r5, #0
 800401a:	bfa8      	it	ge
 800401c:	6821      	ldrge	r1, [r4, #0]
 800401e:	60a5      	str	r5, [r4, #8]
 8004020:	bfa4      	itt	ge
 8004022:	f021 0104 	bicge.w	r1, r1, #4
 8004026:	6021      	strge	r1, [r4, #0]
 8004028:	b90e      	cbnz	r6, 800402e <_printf_i+0x11a>
 800402a:	2d00      	cmp	r5, #0
 800402c:	d04d      	beq.n	80040ca <_printf_i+0x1b6>
 800402e:	4615      	mov	r5, r2
 8004030:	fbb6 f1f3 	udiv	r1, r6, r3
 8004034:	fb03 6711 	mls	r7, r3, r1, r6
 8004038:	5dc7      	ldrb	r7, [r0, r7]
 800403a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800403e:	4637      	mov	r7, r6
 8004040:	42bb      	cmp	r3, r7
 8004042:	460e      	mov	r6, r1
 8004044:	d9f4      	bls.n	8004030 <_printf_i+0x11c>
 8004046:	2b08      	cmp	r3, #8
 8004048:	d10b      	bne.n	8004062 <_printf_i+0x14e>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	07de      	lsls	r6, r3, #31
 800404e:	d508      	bpl.n	8004062 <_printf_i+0x14e>
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	6861      	ldr	r1, [r4, #4]
 8004054:	4299      	cmp	r1, r3
 8004056:	bfde      	ittt	le
 8004058:	2330      	movle	r3, #48	; 0x30
 800405a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800405e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004062:	1b52      	subs	r2, r2, r5
 8004064:	6122      	str	r2, [r4, #16]
 8004066:	464b      	mov	r3, r9
 8004068:	4621      	mov	r1, r4
 800406a:	4640      	mov	r0, r8
 800406c:	f8cd a000 	str.w	sl, [sp]
 8004070:	aa03      	add	r2, sp, #12
 8004072:	f7ff fedf 	bl	8003e34 <_printf_common>
 8004076:	3001      	adds	r0, #1
 8004078:	d14c      	bne.n	8004114 <_printf_i+0x200>
 800407a:	f04f 30ff 	mov.w	r0, #4294967295
 800407e:	b004      	add	sp, #16
 8004080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004084:	4834      	ldr	r0, [pc, #208]	; (8004158 <_printf_i+0x244>)
 8004086:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800408a:	6829      	ldr	r1, [r5, #0]
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004092:	6029      	str	r1, [r5, #0]
 8004094:	061d      	lsls	r5, r3, #24
 8004096:	d514      	bpl.n	80040c2 <_printf_i+0x1ae>
 8004098:	07df      	lsls	r7, r3, #31
 800409a:	bf44      	itt	mi
 800409c:	f043 0320 	orrmi.w	r3, r3, #32
 80040a0:	6023      	strmi	r3, [r4, #0]
 80040a2:	b91e      	cbnz	r6, 80040ac <_printf_i+0x198>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f023 0320 	bic.w	r3, r3, #32
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	2310      	movs	r3, #16
 80040ae:	e7af      	b.n	8004010 <_printf_i+0xfc>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	f043 0320 	orr.w	r3, r3, #32
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	2378      	movs	r3, #120	; 0x78
 80040ba:	4828      	ldr	r0, [pc, #160]	; (800415c <_printf_i+0x248>)
 80040bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040c0:	e7e3      	b.n	800408a <_printf_i+0x176>
 80040c2:	0659      	lsls	r1, r3, #25
 80040c4:	bf48      	it	mi
 80040c6:	b2b6      	uxthmi	r6, r6
 80040c8:	e7e6      	b.n	8004098 <_printf_i+0x184>
 80040ca:	4615      	mov	r5, r2
 80040cc:	e7bb      	b.n	8004046 <_printf_i+0x132>
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	6826      	ldr	r6, [r4, #0]
 80040d2:	1d18      	adds	r0, r3, #4
 80040d4:	6961      	ldr	r1, [r4, #20]
 80040d6:	6028      	str	r0, [r5, #0]
 80040d8:	0635      	lsls	r5, r6, #24
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	d501      	bpl.n	80040e2 <_printf_i+0x1ce>
 80040de:	6019      	str	r1, [r3, #0]
 80040e0:	e002      	b.n	80040e8 <_printf_i+0x1d4>
 80040e2:	0670      	lsls	r0, r6, #25
 80040e4:	d5fb      	bpl.n	80040de <_printf_i+0x1ca>
 80040e6:	8019      	strh	r1, [r3, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	4615      	mov	r5, r2
 80040ec:	6123      	str	r3, [r4, #16]
 80040ee:	e7ba      	b.n	8004066 <_printf_i+0x152>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	2100      	movs	r1, #0
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	602a      	str	r2, [r5, #0]
 80040f8:	681d      	ldr	r5, [r3, #0]
 80040fa:	6862      	ldr	r2, [r4, #4]
 80040fc:	4628      	mov	r0, r5
 80040fe:	f000 f82f 	bl	8004160 <memchr>
 8004102:	b108      	cbz	r0, 8004108 <_printf_i+0x1f4>
 8004104:	1b40      	subs	r0, r0, r5
 8004106:	6060      	str	r0, [r4, #4]
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	2300      	movs	r3, #0
 800410e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004112:	e7a8      	b.n	8004066 <_printf_i+0x152>
 8004114:	462a      	mov	r2, r5
 8004116:	4649      	mov	r1, r9
 8004118:	4640      	mov	r0, r8
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	47d0      	blx	sl
 800411e:	3001      	adds	r0, #1
 8004120:	d0ab      	beq.n	800407a <_printf_i+0x166>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	079b      	lsls	r3, r3, #30
 8004126:	d413      	bmi.n	8004150 <_printf_i+0x23c>
 8004128:	68e0      	ldr	r0, [r4, #12]
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	4298      	cmp	r0, r3
 800412e:	bfb8      	it	lt
 8004130:	4618      	movlt	r0, r3
 8004132:	e7a4      	b.n	800407e <_printf_i+0x16a>
 8004134:	2301      	movs	r3, #1
 8004136:	4632      	mov	r2, r6
 8004138:	4649      	mov	r1, r9
 800413a:	4640      	mov	r0, r8
 800413c:	47d0      	blx	sl
 800413e:	3001      	adds	r0, #1
 8004140:	d09b      	beq.n	800407a <_printf_i+0x166>
 8004142:	3501      	adds	r5, #1
 8004144:	68e3      	ldr	r3, [r4, #12]
 8004146:	9903      	ldr	r1, [sp, #12]
 8004148:	1a5b      	subs	r3, r3, r1
 800414a:	42ab      	cmp	r3, r5
 800414c:	dcf2      	bgt.n	8004134 <_printf_i+0x220>
 800414e:	e7eb      	b.n	8004128 <_printf_i+0x214>
 8004150:	2500      	movs	r5, #0
 8004152:	f104 0619 	add.w	r6, r4, #25
 8004156:	e7f5      	b.n	8004144 <_printf_i+0x230>
 8004158:	080044ad 	.word	0x080044ad
 800415c:	080044be 	.word	0x080044be

08004160 <memchr>:
 8004160:	4603      	mov	r3, r0
 8004162:	b510      	push	{r4, lr}
 8004164:	b2c9      	uxtb	r1, r1
 8004166:	4402      	add	r2, r0
 8004168:	4293      	cmp	r3, r2
 800416a:	4618      	mov	r0, r3
 800416c:	d101      	bne.n	8004172 <memchr+0x12>
 800416e:	2000      	movs	r0, #0
 8004170:	e003      	b.n	800417a <memchr+0x1a>
 8004172:	7804      	ldrb	r4, [r0, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	428c      	cmp	r4, r1
 8004178:	d1f6      	bne.n	8004168 <memchr+0x8>
 800417a:	bd10      	pop	{r4, pc}

0800417c <memcpy>:
 800417c:	440a      	add	r2, r1
 800417e:	4291      	cmp	r1, r2
 8004180:	f100 33ff 	add.w	r3, r0, #4294967295
 8004184:	d100      	bne.n	8004188 <memcpy+0xc>
 8004186:	4770      	bx	lr
 8004188:	b510      	push	{r4, lr}
 800418a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418e:	4291      	cmp	r1, r2
 8004190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004194:	d1f9      	bne.n	800418a <memcpy+0xe>
 8004196:	bd10      	pop	{r4, pc}

08004198 <memmove>:
 8004198:	4288      	cmp	r0, r1
 800419a:	b510      	push	{r4, lr}
 800419c:	eb01 0402 	add.w	r4, r1, r2
 80041a0:	d902      	bls.n	80041a8 <memmove+0x10>
 80041a2:	4284      	cmp	r4, r0
 80041a4:	4623      	mov	r3, r4
 80041a6:	d807      	bhi.n	80041b8 <memmove+0x20>
 80041a8:	1e43      	subs	r3, r0, #1
 80041aa:	42a1      	cmp	r1, r4
 80041ac:	d008      	beq.n	80041c0 <memmove+0x28>
 80041ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041b6:	e7f8      	b.n	80041aa <memmove+0x12>
 80041b8:	4601      	mov	r1, r0
 80041ba:	4402      	add	r2, r0
 80041bc:	428a      	cmp	r2, r1
 80041be:	d100      	bne.n	80041c2 <memmove+0x2a>
 80041c0:	bd10      	pop	{r4, pc}
 80041c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ca:	e7f7      	b.n	80041bc <memmove+0x24>

080041cc <_free_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4605      	mov	r5, r0
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d040      	beq.n	8004256 <_free_r+0x8a>
 80041d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d8:	1f0c      	subs	r4, r1, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfb8      	it	lt
 80041de:	18e4      	addlt	r4, r4, r3
 80041e0:	f000 f910 	bl	8004404 <__malloc_lock>
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <_free_r+0x8c>)
 80041e6:	6813      	ldr	r3, [r2, #0]
 80041e8:	b933      	cbnz	r3, 80041f8 <_free_r+0x2c>
 80041ea:	6063      	str	r3, [r4, #4]
 80041ec:	6014      	str	r4, [r2, #0]
 80041ee:	4628      	mov	r0, r5
 80041f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f4:	f000 b90c 	b.w	8004410 <__malloc_unlock>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d908      	bls.n	800420e <_free_r+0x42>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	1821      	adds	r1, r4, r0
 8004200:	428b      	cmp	r3, r1
 8004202:	bf01      	itttt	eq
 8004204:	6819      	ldreq	r1, [r3, #0]
 8004206:	685b      	ldreq	r3, [r3, #4]
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	e7ed      	b.n	80041ea <_free_r+0x1e>
 800420e:	461a      	mov	r2, r3
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	b10b      	cbz	r3, 8004218 <_free_r+0x4c>
 8004214:	42a3      	cmp	r3, r4
 8004216:	d9fa      	bls.n	800420e <_free_r+0x42>
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	1850      	adds	r0, r2, r1
 800421c:	42a0      	cmp	r0, r4
 800421e:	d10b      	bne.n	8004238 <_free_r+0x6c>
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	4401      	add	r1, r0
 8004224:	1850      	adds	r0, r2, r1
 8004226:	4283      	cmp	r3, r0
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	d1e0      	bne.n	80041ee <_free_r+0x22>
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4401      	add	r1, r0
 8004232:	6011      	str	r1, [r2, #0]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	e7da      	b.n	80041ee <_free_r+0x22>
 8004238:	d902      	bls.n	8004240 <_free_r+0x74>
 800423a:	230c      	movs	r3, #12
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	e7d6      	b.n	80041ee <_free_r+0x22>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	1821      	adds	r1, r4, r0
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	6054      	str	r4, [r2, #4]
 8004254:	e7cb      	b.n	80041ee <_free_r+0x22>
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	200001ac 	.word	0x200001ac

0800425c <sbrk_aligned>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4e0e      	ldr	r6, [pc, #56]	; (8004298 <sbrk_aligned+0x3c>)
 8004260:	460c      	mov	r4, r1
 8004262:	6831      	ldr	r1, [r6, #0]
 8004264:	4605      	mov	r5, r0
 8004266:	b911      	cbnz	r1, 800426e <sbrk_aligned+0x12>
 8004268:	f000 f8bc 	bl	80043e4 <_sbrk_r>
 800426c:	6030      	str	r0, [r6, #0]
 800426e:	4621      	mov	r1, r4
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f8b7 	bl	80043e4 <_sbrk_r>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d00a      	beq.n	8004290 <sbrk_aligned+0x34>
 800427a:	1cc4      	adds	r4, r0, #3
 800427c:	f024 0403 	bic.w	r4, r4, #3
 8004280:	42a0      	cmp	r0, r4
 8004282:	d007      	beq.n	8004294 <sbrk_aligned+0x38>
 8004284:	1a21      	subs	r1, r4, r0
 8004286:	4628      	mov	r0, r5
 8004288:	f000 f8ac 	bl	80043e4 <_sbrk_r>
 800428c:	3001      	adds	r0, #1
 800428e:	d101      	bne.n	8004294 <sbrk_aligned+0x38>
 8004290:	f04f 34ff 	mov.w	r4, #4294967295
 8004294:	4620      	mov	r0, r4
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	200001b0 	.word	0x200001b0

0800429c <_malloc_r>:
 800429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	1ccd      	adds	r5, r1, #3
 80042a2:	f025 0503 	bic.w	r5, r5, #3
 80042a6:	3508      	adds	r5, #8
 80042a8:	2d0c      	cmp	r5, #12
 80042aa:	bf38      	it	cc
 80042ac:	250c      	movcc	r5, #12
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	4607      	mov	r7, r0
 80042b2:	db01      	blt.n	80042b8 <_malloc_r+0x1c>
 80042b4:	42a9      	cmp	r1, r5
 80042b6:	d905      	bls.n	80042c4 <_malloc_r+0x28>
 80042b8:	230c      	movs	r3, #12
 80042ba:	2600      	movs	r6, #0
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4630      	mov	r0, r6
 80042c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c4:	4e2e      	ldr	r6, [pc, #184]	; (8004380 <_malloc_r+0xe4>)
 80042c6:	f000 f89d 	bl	8004404 <__malloc_lock>
 80042ca:	6833      	ldr	r3, [r6, #0]
 80042cc:	461c      	mov	r4, r3
 80042ce:	bb34      	cbnz	r4, 800431e <_malloc_r+0x82>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff ffc2 	bl	800425c <sbrk_aligned>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	4604      	mov	r4, r0
 80042dc:	d14d      	bne.n	800437a <_malloc_r+0xde>
 80042de:	6834      	ldr	r4, [r6, #0]
 80042e0:	4626      	mov	r6, r4
 80042e2:	2e00      	cmp	r6, #0
 80042e4:	d140      	bne.n	8004368 <_malloc_r+0xcc>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	4631      	mov	r1, r6
 80042ea:	4638      	mov	r0, r7
 80042ec:	eb04 0803 	add.w	r8, r4, r3
 80042f0:	f000 f878 	bl	80043e4 <_sbrk_r>
 80042f4:	4580      	cmp	r8, r0
 80042f6:	d13a      	bne.n	800436e <_malloc_r+0xd2>
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	3503      	adds	r5, #3
 80042fc:	1a6d      	subs	r5, r5, r1
 80042fe:	f025 0503 	bic.w	r5, r5, #3
 8004302:	3508      	adds	r5, #8
 8004304:	2d0c      	cmp	r5, #12
 8004306:	bf38      	it	cc
 8004308:	250c      	movcc	r5, #12
 800430a:	4638      	mov	r0, r7
 800430c:	4629      	mov	r1, r5
 800430e:	f7ff ffa5 	bl	800425c <sbrk_aligned>
 8004312:	3001      	adds	r0, #1
 8004314:	d02b      	beq.n	800436e <_malloc_r+0xd2>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	442b      	add	r3, r5
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	e00e      	b.n	800433c <_malloc_r+0xa0>
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	1b52      	subs	r2, r2, r5
 8004322:	d41e      	bmi.n	8004362 <_malloc_r+0xc6>
 8004324:	2a0b      	cmp	r2, #11
 8004326:	d916      	bls.n	8004356 <_malloc_r+0xba>
 8004328:	1961      	adds	r1, r4, r5
 800432a:	42a3      	cmp	r3, r4
 800432c:	6025      	str	r5, [r4, #0]
 800432e:	bf18      	it	ne
 8004330:	6059      	strne	r1, [r3, #4]
 8004332:	6863      	ldr	r3, [r4, #4]
 8004334:	bf08      	it	eq
 8004336:	6031      	streq	r1, [r6, #0]
 8004338:	5162      	str	r2, [r4, r5]
 800433a:	604b      	str	r3, [r1, #4]
 800433c:	4638      	mov	r0, r7
 800433e:	f104 060b 	add.w	r6, r4, #11
 8004342:	f000 f865 	bl	8004410 <__malloc_unlock>
 8004346:	f026 0607 	bic.w	r6, r6, #7
 800434a:	1d23      	adds	r3, r4, #4
 800434c:	1af2      	subs	r2, r6, r3
 800434e:	d0b6      	beq.n	80042be <_malloc_r+0x22>
 8004350:	1b9b      	subs	r3, r3, r6
 8004352:	50a3      	str	r3, [r4, r2]
 8004354:	e7b3      	b.n	80042be <_malloc_r+0x22>
 8004356:	6862      	ldr	r2, [r4, #4]
 8004358:	42a3      	cmp	r3, r4
 800435a:	bf0c      	ite	eq
 800435c:	6032      	streq	r2, [r6, #0]
 800435e:	605a      	strne	r2, [r3, #4]
 8004360:	e7ec      	b.n	800433c <_malloc_r+0xa0>
 8004362:	4623      	mov	r3, r4
 8004364:	6864      	ldr	r4, [r4, #4]
 8004366:	e7b2      	b.n	80042ce <_malloc_r+0x32>
 8004368:	4634      	mov	r4, r6
 800436a:	6876      	ldr	r6, [r6, #4]
 800436c:	e7b9      	b.n	80042e2 <_malloc_r+0x46>
 800436e:	230c      	movs	r3, #12
 8004370:	4638      	mov	r0, r7
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	f000 f84c 	bl	8004410 <__malloc_unlock>
 8004378:	e7a1      	b.n	80042be <_malloc_r+0x22>
 800437a:	6025      	str	r5, [r4, #0]
 800437c:	e7de      	b.n	800433c <_malloc_r+0xa0>
 800437e:	bf00      	nop
 8004380:	200001ac 	.word	0x200001ac

08004384 <_realloc_r>:
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004388:	4680      	mov	r8, r0
 800438a:	4614      	mov	r4, r2
 800438c:	460e      	mov	r6, r1
 800438e:	b921      	cbnz	r1, 800439a <_realloc_r+0x16>
 8004390:	4611      	mov	r1, r2
 8004392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	f7ff bf81 	b.w	800429c <_malloc_r>
 800439a:	b92a      	cbnz	r2, 80043a8 <_realloc_r+0x24>
 800439c:	f7ff ff16 	bl	80041cc <_free_r>
 80043a0:	4625      	mov	r5, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	f000 f838 	bl	800441c <_malloc_usable_size_r>
 80043ac:	4284      	cmp	r4, r0
 80043ae:	4607      	mov	r7, r0
 80043b0:	d802      	bhi.n	80043b8 <_realloc_r+0x34>
 80043b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043b6:	d812      	bhi.n	80043de <_realloc_r+0x5a>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4640      	mov	r0, r8
 80043bc:	f7ff ff6e 	bl	800429c <_malloc_r>
 80043c0:	4605      	mov	r5, r0
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0ed      	beq.n	80043a2 <_realloc_r+0x1e>
 80043c6:	42bc      	cmp	r4, r7
 80043c8:	4622      	mov	r2, r4
 80043ca:	4631      	mov	r1, r6
 80043cc:	bf28      	it	cs
 80043ce:	463a      	movcs	r2, r7
 80043d0:	f7ff fed4 	bl	800417c <memcpy>
 80043d4:	4631      	mov	r1, r6
 80043d6:	4640      	mov	r0, r8
 80043d8:	f7ff fef8 	bl	80041cc <_free_r>
 80043dc:	e7e1      	b.n	80043a2 <_realloc_r+0x1e>
 80043de:	4635      	mov	r5, r6
 80043e0:	e7df      	b.n	80043a2 <_realloc_r+0x1e>
	...

080043e4 <_sbrk_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	2300      	movs	r3, #0
 80043e8:	4d05      	ldr	r5, [pc, #20]	; (8004400 <_sbrk_r+0x1c>)
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	f7fc fde4 	bl	8000fbc <_sbrk>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_sbrk_r+0x1a>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_sbrk_r+0x1a>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	200001b4 	.word	0x200001b4

08004404 <__malloc_lock>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__malloc_lock+0x8>)
 8004406:	f000 b811 	b.w	800442c <__retarget_lock_acquire_recursive>
 800440a:	bf00      	nop
 800440c:	200001b8 	.word	0x200001b8

08004410 <__malloc_unlock>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__malloc_unlock+0x8>)
 8004412:	f000 b80c 	b.w	800442e <__retarget_lock_release_recursive>
 8004416:	bf00      	nop
 8004418:	200001b8 	.word	0x200001b8

0800441c <_malloc_usable_size_r>:
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f18      	subs	r0, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfbc      	itt	lt
 8004426:	580b      	ldrlt	r3, [r1, r0]
 8004428:	18c0      	addlt	r0, r0, r3
 800442a:	4770      	bx	lr

0800442c <__retarget_lock_acquire_recursive>:
 800442c:	4770      	bx	lr

0800442e <__retarget_lock_release_recursive>:
 800442e:	4770      	bx	lr

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
